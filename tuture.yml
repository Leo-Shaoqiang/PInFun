name: Taro 多端小程序开发大型实战
id: 34a473b9e9e5e3dafcc619ab152750af
created: '2019-12-25T10:16:40.222Z'
updated: 2020-02-18T13:57:56.494Z
github: 'https://github.com/tuture-dev/ultra-club'
topics:
  - Taro
categories:
  - 小程序
  - Taro
  - 入门
description: >-
  正当移动互联网进入白热化阶段时，以微信小程序为代表的一类“轻应用”异军突起。它们无需下载，使用方便，“用完即走”，同时功能也较为完备，一经推出即得到了各大平台和及用户的热烈追捧。但是问题也随之而来——开发者们要同时维护
  Web 端、移动端、微信小程序、支付宝小程序等等多套用户界面，其维护成本可以想象。作为一个优秀的多端统一开发解决方案，Taro 的出现则改变了这一情况。正值
  Taro 2.x 进入 beta 阶段，让我们沏上一杯茶，开始我们的 Taro 多端小程序开发之旅吧。
splits:
  - name: Taro 小程序开发大型实战（一）：熟悉的 React，熟悉的 Hooks
    description: >-
      正当移动互联网进入白热化阶段时，以微信小程序为代表的一类“轻应用”异军突起。它们无需下载，使用方便，“用完即走”，同时功能也较为完备，一经推出即得到了各大平台和及用户的热烈追捧。但是问题也随之而来——开发者们要同时维护
      Web 端、移动端、微信小程序、支付宝小程序等等多套用户界面，其维护成本可以想象。作为一个优秀的多端统一开发解决方案，Taro
      的出现则改变了这一情况。正值 Taro 2.x 进入 beta 阶段，让我们沏上一杯茶，开始我们的 Taro 多端小程序开发之旅吧。
    cover: tuture-assets/taro-cover-1.jpg
    id: 34a473b9e9e5e3dafcc619ab152750af
    start: '8565035'
    end: da834d1
    created: '2019-12-26T10:16:40.222Z'
    updated: '2020-12-26T13:57:56.494Z'
  - name: Taro 小程序开发大型实战（二）：多页面跳转和 Taro UI 组件库
    description: >-
      在上一篇教程中，我们用熟悉的 React 和 Hooks 搞定了“奥特曼俱乐部”的雏形。在这一篇文章中，我们将用 Taro
      自带的路由功能实现多页面跳转，并用 Taro UI 组件库升级之前略显简陋的界面。
    cover: tuture-assets/taro-cover-2.jpg
    topics:
      - Taro
      - Taro UI
    id: af6922503ad1941b09b324ffa35f33ea
    start: f6c79ab
    end: 63131b6
    created: '2019-12-29T10:16:40.222Z'
    updated: '2020-12-29T13:57:56.494Z'
  - name: Taro 小程序开发大型实战（三）：实现微信和支付宝多端登录
    description: >-
      能够借助所在平台实现“一键登录”是小程序的一大优势，大大降低了用户的使用门槛，但是各平台处理登录和鉴权的方式又存在较大的差异。在这一篇文章中，我们将带你踩过“多端登录”的“坑”，让用户能够在不同的平台轻松登录我们的应用。
    cover: tuture-assets/taro-cover-3.jpg
    id: 5e10118be51d454165777203
    categories:
      - 小程序
      - Taro
      - 进阶
    start: 1da2fee
    end: 1da2fee
    created: '2020-01-06T10:16:40.222Z'
    updated: '2020-01-06T13:57:56.494Z'
  - name: Taro 小程序开发大型实战（四）：使用 Hooks 版的 Redux 实现应用状态管理
    description: >-
      随着状态增多，状态提升的操作也随着增多，导致保存这些状态的父组件会臃肿不堪，而且每次状态的改变需要影响很多中间组件，带来极大的性能开销。在这篇长文中，我们将用
      Hooks 版的 Redux 来解决状态管理的难题，而让 Taro 专注于渲染用户界面。
    cover: tuture-assets/taro-cover-4.jpg
    id: 5e100f78e51d4541493621cd
    topics:
      - Taro
      - Redux
    categories:
      - 小程序
      - Taro
      - 进阶
    start: a3cf715
    end: a3cf715
    created: '2020-01-15T10:16:40.222Z'
    updated: '2020-01-15T13:57:56.494Z'
  - name: Taro 小程序开发大型实战（五）：尝鲜微信小程序云（上篇）
    description: >-
      为了将数据持久化存储和高效的查询，我们需要把数据存储到数据库中，为了实现⼩程序端便捷的开发体验，⼀大批⼩程序 Serverless
      服务兴起，⽽而微信小程序云正是为了微信小程序的快速开发⽽生的。在这篇文章中，我们将使用微信小程序云作为我们的后端，并讲解如何引⼊和实现 Redux
      异步⼯作流来 实现⼩程序端访问小程序云的状态管理。
    cover: tuture-assets/taro-cover-5.jpg
    id: b32362b
    start: b32362b
    end: b32362b
    created: '2019-01-17T10:16:40.222Z'
    updated: '2020-01-17T13:57:56.494Z'
  - name: Taro 小程序开发大型实战（六）：LeanCloud，一统江湖
    description: "在上两篇文章中，我们讲解了使用微信小程序云作为我们的小程序后台，然后我们跑通了我们的注册登录、创建帖子、获取帖子列表、获取帖子详情的全栈流程，如果只想了解微信小程序的全栈开发流程的话，之前的文章已经足够了，如果还想了解跨端开发全栈开发流程的话（当然用 Taro 的同学估计也比较期待跨端的全栈开发流程，手动滑稽）接下来这篇文章就是你的菜了\U0001F606"
    cover: tuture-assets/taro-cover-6.jpg
    id: abfd872
    start: abfd872
    end: abfd872
    created: '2020-02-19T10:16:40.222Z'
    updated: '2020-02-19T13:57:56.494Z'
steps:
  - name: 起步
    commit: '8565035'
    diff:
      - file: .editorconfig
      - file: .eslintrc
      - file: .gitignore
      - file: .prettierrc
      - file: config/dev.js
        display: false
        explain:
          pre: ''
      - file: config/index.js
        display: false
      - file: config/prod.js
        display: false
      - file: package.json
        display: false
      - file: project.config.json
        display: false
      - file: src/app.jsx
        display: true
        explain:
          pre: |-
            ### 初探脚手架代码

            `src/app.jsx` 定义了项目的根组件 `App`，它的代码如下：
          post: >-
            如果你熟悉 React 的话，那么上面这段代码一定不难理解，只不过是把相应的地方（导包、渲染）从之前的 `React` 以及
            `ReactDOM` 改成 `Taro`。



            ::: warning

            **注意**


            可以看到这个组件还多了一个 `config` 属性，这个属性是小程序应用专属的。其中要重点关注的是 `pages`
            数组，列出了所有的页面模块，例如这里的 `pages/index/index` 就对应
            src/pages/index/index.jsx。后面在实现路由时还会用到 `pages` 属性。

            :::
      - file: src/app.scss
        display: false
      - file: src/index.html
        display: false
      - file: src/pages/index/index.jsx
        display: true
        explain:
          pre: >-
            我们再看看 `src/pages/index/index.jsx`。按照最佳实践，Taro 项目中一般把页面组件放到
            `src/pages` 目录中，`src/pages/index` 就是 `index` 页面组件模块，其中 index.jsx
            的代码如下：
          post: >-
            依旧是熟悉的 React 组件风格，只不过与普通的 React 相比，在 `render` 函数中我们用的不再是 `div` 和 `p`
            标签，而是 Taro 为我们准备好的 `View` 和 `Text` 组件。为什么 Taro 要自己搞一套组件库呢？因为 Taro
            的目标是星辰大海……sorry，是能够编译到各个平台。**只有通过制订 Taro
            自己的组件库，才能在各个平台的原生组件库上盖了一层抽象层，进而实现跨平台的目标**。



            ::: info

            **提示**


            如果你有过 React Native 的开发经验，那么一定对 Taro 组件库不陌生。

            :::
      - file: src/pages/index/index.scss
        display: false
      - file: yarn.lock
    explain:
      pre: "对于国内 React 开发者来说，[Taro](https://taro.jd.com/) 的出现无疑是福音——它能够让我们用熟悉的 React 代码去搭建各类小程序，并且一份代码可以编译成多个平台的应用（目前包括微信小程序、支付宝小程序、React Native、H5 等等）。随着 Taro 的不断进化，它对 React 代码的支持程度越来越好，所支持的目标平台也越来越多，学习的价值自然不必多言。正值 Taro 进入 2.0.0 版本的 beta 阶段，我们在这一篇教程将手把手带你实现一个能够部署到多端的小程序，让你感受 Taro 的强大与魅力！\n\n在这一系列教程中，我们将构建一个多端小程序应用——奥特曼俱乐部（Ultraman Club，简称 UltraClub），一个支持多端登录（微信和支付宝）的类似贴吧的小程序。我们还提供了项目仓库的 [GitHub 地址](https://github.com/tuture-dev/ultra-club)。*项目目前还在开发阶段，您可以跳转到任意一次 commit 查看当前步骤的所有代码哦。*\n\n### 我们将构建什么？\n\n在完成这篇教程后，项目的 GIF 动图展示如下：\n\n![](tuture-assets/taro-demo1.gif)\n\n具体有三个页面：\n\n1. **主页**：展示了所有帖子，以及添加新帖子的按钮。\n2. **帖子详情**：展示单个帖子的全部内容。\n3. **个人主页**：展示用户的个人信息。\n\n### 前提条件\n\n在阅读这篇教程之前，我们希望你已经具备以下知识：\n\n- 了解 HTML、CSS、JavaScript 的基础知识，如果了解 Sass 就更好了\n- 了解 React 框架的基础知识，可以参考[这篇教程](https://tuture.co/2019/11/18/07acf61/)进行学习；如果接触过 React Native 以及 Hooks 则更好了\n- 了解并已经安装好 Node 与 npm，可以参考[这篇教程](https://tuture.co/2019/12/03/892fa12/)进行学习\n\n*除此之外，你还需要下载并安装微信开发者工具，这里是[下载地址](https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html)。*\n\n### 用 Taro 脚手架初始化项目\n\n首先安装 Taro CLI：\n\n```bash\nnpm install -g @tarojs/cli\n```\n\n然后创建我们的项目：\n\n```bash\ntaro init ultra-club\n```\n\n之后会出现一系列选项，按照下图所示进行选择即可（CSS 预处理器选择 [Sass](https://www.sass.hk/)，模板选择“默认模板”，老司机可自行选择使用 TS）：\n\n![](tuture-assets/taro-init.png)\n\n\n::: info\n**提示**\n\n本项目使用 [Sass](https://www.sass.hk/) 主要是为了兼容 taro-ui 的样式，并没有使用到 Sass 的高级特性，如果你不熟悉的话也不用担心哦，就当成是常规的 CSS 代码。\n:::\n\n\n进入到我们的项目目录 ultra-club 之后，可以看到项目模板包括以下文件：\n\n```text\n.\n├── config                    # 项目配置\n│\_\_ ├── dev.js                # 开发环境配置文件\n│\_\_ ├── index.js              # 主配置文件\n│\_\_ └── prod.js               # 生产环境配置文件\n├── package.json\n├── project.config.json       # 微信小程序项目配置\n└── src                       # 项目源码目录\n    ├── app.scss              # 根组件样式\n    ├── app.jsx               # 根组件 app\n    ├── index.html            # 等待被嵌入代码的 HTML 文档\n    └── pages                 # 页面目录\n        └── index             # index 页面模块\n            ├── index.scss    # index 页面样式\n            └── index.jsx     # index 页面组件\n```\n\n我们主要看一下两个代码文件：`src/app.jsx` 以及 `src/pages/index/index.jsx`。"
      post: >-
        ### 运行小程序


        Taro 提供的模板代码直接可以运行。打开终端，运行以下命令：


        ```bash

        npm run dev:weapp

        ```


        会出现以下提示信息：


        ![](tuture-assets/dev-weapp.png)


        当看到“监听文件修改中...”的提示后，我们就可以打开微信开发者工具，用微信扫码登录后界面如下：


        ![](tuture-assets/wechat-dev-new.png)


        点击那个硕大的➕号，开始导入我们刚才创建的 ultra-club 项目：


        ![](tuture-assets/import-project.png)


        如上图所示，首先切换到”导入项目“一栏，然后点击”目录“输入栏右侧的按钮选择刚才创建的 ultra-club
        文件夹，最后点击右下角的”导入“按钮即可。


        导入成功后，微信开发者工具的界面如下图所示：


        ![](tuture-assets/devtool-ui.png)


        在模拟器页面中，看到了我们 `index` 页面渲染的 Hello
        world；编辑器能够查看所有代码，不过通常我们用自己习惯的代码编辑器来开发（VSCode 真香！）；调试器则是类似 Chrome
        的开发者工具。


        一切就绪，让我们开始动工吧！


        ::: info

        **提示**


        从这一步开始，我们的主要开发目标将是微信小程序，但是不要担心，我们会在文章的最后演示怎么编译到其他平台哦。

        :::
  - name: React 代码，熟悉的味道
    commit: 102299e
    diff:
      - file: src/components/PostCard/index.jsx
        display: true
        explain:
          pre: >-
            ### 实现 PostCard 组件


            首先创建 `src/components` 目录，我们的通用组件都会放在这里面。然后创建
            `src/components/PostCard` 组件目录，在其中分别创建 `index.jsx` 和
            `index.scss`。`index.jsx` 代码如下：
          post: 正如之前所说，`PostCard` 组件包含两个 props：标题 `title` 和内容 `content`。
      - file: src/components/PostCard/index.scss
        display: true
        explain:
          pre: PostCard 组件的样式 `index.scss` 代码如下：
      - file: src/components/PostForm/index.jsx
        display: true
        explain:
          pre: >-
            ### 实现 PostForm 组件


            接着我们实现用于创建新帖子的 PostForm 组件。在 `src/components` 中创建 `PostForm`
            目录，并在其中添加 `index.jsx` 和 `index.scss` 文件。`index.jsx` 代码如下：
          post: >
            `PostForm` 组件一共定义了五个 props，分别如下：


            - `formTitle`：当前编辑中帖子的标题

            - `formContent`：当前编辑中帖子的内容

            - `handleSubmit`：处理提交表单的回调函数

            - `handleTitleInput`：处理标题接收到用户输入时的回调函数

            - `handleContentInput`：处理内容接收到用户输入时的回调函数



            ::: info

            **提示**


            如果你不熟悉 React，可能会对上面编写表单的方式有点困惑。实际上，React
            推荐用”受控组件“的方式编写表单，可参考[这篇文档](https://zh-hans.reactjs.org/docs/forms.html)。

            :::
      - file: src/components/PostForm/index.scss
        display: true
        explain:
          pre: PostForm 的样式文件 `index.scss` 的代码如下：
      - file: src/components/index.jsx
        display: true
        explain:
          pre: >-
            为了方便在页面组件中使用 `PostCard` 和 `PostForm` 组件，我们把 `src/components`
            变成一个模块。具体地，创建 `src/components/index.jsx`，代码如下：
      - file: src/pages/index/index.jsx
        display: true
        explain:
          pre: >-
            ### 在 index 页面中接入 PostCard 和 PostForm


            最后在 `src/pages/index/index.jsx` 文件中加入之前写好的 PostCard 和 PostForm
            组件，代码如下：
          post: |-
            可以看到，除了接入之前定义的两个组件外，我们还加入了一些状态：

            - `posts`：当前所有的帖子，每个帖子是一个包含 `title` 和 `content` 的对象
            - `formTitle`：当前正在编辑的帖子的标题
            - `formContent`：当前正在编辑的帖子的内容

            以及定义了 `PostForm` 组件中所需要的三个回调函数。
    explain:
      pre: |-
        从这一步开始，我们就来实现”奥特曼俱乐部“小程序。按照 React 中”万物皆组件“的思想，我们抽象出两个组件：

        - `PostCard`：用于展示一篇帖子，包括标题 `title` 和内容 `content`
        - `PostForm`：用于发布新帖子的表单
      post: >
        ### 查看效果


        如果之前的开发服务器还打开着，那么微信开发者工具应该就能直接看到效果了（如果刚才关了，可以运行 `npm run dev:weapp`
        再次打开哦）：


        ![](tuture-assets/taro-demo1.gif)



        ::: warning

        **注意**


        有时候 Taro 可能会出现样式加载失败的问题。如果你遇到了，可以关闭开发服务器，重新运行 `npm run dev:weapp`。

        :::
  - name: Hooks 轻装上阵
    commit: da834d1
    diff:
      - file: src/pages/index/index.jsx
        display: true
        explain:
          pre: >-
            ### 动手环节


            到了动手环节，我们用 `useState` 来重构我们的 index 页面。具体地，我们将整个 `Index`
            组件转换成函数式组件，然后之前的三个状态都用 `useState` 来创建，代码如下：
          post: >

            ::: warning

            **注意**


            由于我们把 `Index` 从类组件改造成了函数组件，所以挂载 `config` 要在 `Index` 组件定义之后直接挂载在
            `Index` 上面。

            :::
    explain:
      pre: >-
        自从 React 团队在 2018 年的 React Conf 引入了 Hooks 之后，前端圈无疑是经历了一场地震。仅仅只需几个
        API，就轻松地用**纯函数**的方式搞定了组件的状态管理和数据流，这是何等的神仙操作？


        幸运的是，Taro 团队也在 v1.3.0 版本中添加了[对 Hooks
        的支持](http://taro-docs.jd.com/taro/docs/hooks.html)。因此，我们也将在本项目中用 Hooks
        解决状态管理和数据流的问题。


        ### Hooks 之 useState 快速复习


        本文在这里简单地过一遍 `useState` Hook，如果你已经很熟悉了，请直接移步下面的动手环节。


        比如我们之前有这么一个类组件 `ClickMe`，它会抱怨你点了它多少次：


        ```javascript

        class ClickMe extends Component {
          state = { count: 0 }

          render() {
            return (
              <div>
                <button onClick={() => this.setState({ count: this.state.count + 1 })}>
                  你点了我 {this.state.count} 次！
                </button>
              </div>
            )
          }
        }

        ```


        用 Hooks 改写之后，就变成了一个函数式组件：


        ```javascript

        // 记得导入 useState 函数

        import Taro, { useState } from '@tarojs/taro'


        function ClickMe() {
          const [count, setCount] = useState(0)

          return (
            <div>
              <button onClick={() => setCount(count + 1)}>你点了我 {count} 次！</button>
            </div>
          )
        }

        ```


        可以看到，`useState` 函数返回了两个值：


        - **状态**（也就是上面的 `count`）：可以在渲染时直接使用

        - **修改状态的函数**（也就是上面的 `setCount`）：用于在处理相应事件时，通过传入新的状态来更新状态


        还注意到 `useState` 接受一个参数，即**状态的初始值**。这里我们取了一个 `Number`
        类型，事实上还可以是字符串、数组、对象等等。
      post: >-
        你尽可以打开模拟器试一下重构之后效果，看看功能是否与上一步完全一致哦！在接下来的[第二篇](https://tuture.co/2019/12/25/af69225/)中，我们将进一步实现多页面跳转，并用
        Taro UI 组件库升级我们的界面。
  - name: 来一打页面
    commit: f6c79ab
    diff:
      - file: src/app.jsx
        display: true
        explain:
          pre: |-
            ### 配置全部页面

            首先在入口文件 `src/app.jsx` 中配置好所有页面：
          post: 注意到我们还在 `config` 中注册了导航栏 `tabBar`，用来在底部切换 `index` 页面和 `mine` 页面。
      - file: src/components/PostCard/index.jsx
        display: true
        explain:
          pre: >-
            ### 在 PostCard 中添加跳转逻辑


            我们首先在 `PostCard` 组件中添加跳转逻辑，使得它被点击后将进入该帖子的详情页面。将
            `src/components/PostCard/index.jsx` 按如下代码进行修改：
          post: >
            可以看到，我们在 `PostCard` 中注册了 `handleClick` 用于响应点击事件。在 `handleClick`
            函数中，我们通过新引入的 `isList` 属性判断这个组件是否展示在首页列表中。如果是的话，就通过 `Taro.navigateTo`
            进行跳转。



            ::: info

            **提示**


            眼尖的你一定发现了我们在调用 `navigateTo`
            时还加上了**查询字符串**用于传递参数。在接下来实现帖子详情页面时，我们就可以接收到传递进来的 `title` 和 `content`
            的值啦。

            :::
      - file: src/pages/index/index.jsx
        display: true
        explain:
          pre: >-
            接着我们需要在首页模块中给 `PostCard` 组件加上 `isList`。修改
            `src/pages/index/index.jsx`，代码如下：
      - file: src/pages/post/post.jsx
        display: true
        explain:
          pre: >-
            ### 实现“帖子详情”页面


            在 `src/pages` 中创建 `post` 目录，然后在其中创建 post.jsx 和
            post.scss，分别为页面模块和样式文件。post.jsx 代码如下：
          post: >-
            注意到我们用了 `useRouter` 这个 Hook（Taro 专有），它用来在函数组件中获取 `router`，等同于之前类组件中的
            `this.$router`。有了 `router`，我们就可以获取到在刚才 `PostCard` 组件跳转时传进来的 `title`
            和 `content` 参数了。
      - file: src/pages/post/post.scss
        display: true
        explain:
          pre: post.scss 的代码如下：
      - file: src/pages/mine/mine.jsx
        display: true
        explain:
          pre: >-
            ### 实现“我的”页面


            接着我们实现“我的”页面。创建 `src/pages/mine` 目录，在其中创建 mine.jsx 和 mine.scss。页面组件
            mine.jsx 代码如下：
      - file: src/pages/mine/mine.scss
        display: true
        explain:
          pre: 样式文件 mine.scss 代码如下：
      - file: src/images/avatar.png
      - file: src/images/home.png
      - file: src/images/homeSelected.png
      - file: src/images/mine.png
      - file: src/images/mineSelected.png
    explain:
      pre: >-
        在[上一篇教程](https://tuture.co/2019/12/25/34a473b/)中，我们用熟悉的 React 和 Hooks
        搞定了“奥特曼俱乐部”的雏形。在这一篇文章中，我们将用 Taro 自带的路由功能实现多页面跳转，并用 Taro UI
        组件库升级之前略显简陋的界面。这一篇完成后的 DEMO 如下：


        ![](tuture-assets/taro-demo2.gif)


        如果你想直接从这一篇开始动手实践，那么请运行以下命令快速开始：


        ```bash

        git clone -b second-part https://github.com/tuture-dev/ultra-club.git

        cd ultra-club

        ```


        现在让我们开始实现项目的其他页面吧，包括：


        - 帖子详情 `post`：进入单篇帖子的详情页面

        - 我的 `mine`：显示当前用户的个人信息（在后面的步骤中将实现登录注册哦）


        其中，帖子详情页面中将复用前面编写的 `PostCard` 组件。为了方便管理，我们需要引入一个新的
        prop（`isList`），用于判断此组件是显示在首页列表中，还是在帖子详情页面中。



        ::: info

        **提示**


        项目中所需用到的图片可以从[这个链接](https://github.com/tuture-dev/ultra-club/releases/download/v0.0.1/images.zip)下载，下载后解压并将所有图片放到
        `src/images` 目录下。

        :::



        ### Taro 的路由功能


        路由功能是实现多页面应用的核心，幸运的是 Taro 已经自带了。具体而言，在 Taro 中实现页面跳转只需两个步骤：


        1. 在入口文件（`src/app.jsx`）中在 `App` 组件的 `config` 中配置之前提到的 `pages` 属性

        2. 在任意组件中通过 `Taro.navigateTo` 或 `Taro.redirectTo` 即可实现页面的跳转或重定向


        感觉不够直观？OK，我们直接撸起袖子写起来。
      post: |-
        ### 查看效果

        又到了激动人心的验收环节。我们应该能看到下面所示的效果：

        ![](tuture-assets/taro-demo2.gif)
  - name: 加速开发，Taro UI 帮帮忙
    commit: 63131b6
    diff:
      - file: config/index.js
        display: false
      - file: package.json
        display: false
      - file: src/components/PostForm/index.jsx
        display: true
        explain:
          pre: >-
            ### 升级 PostForm


            首先让我们升级 `PostForm` 组件。我们先尝鲜 Taro UI 的 `AtButton` 组件，替换掉之前 Taro 自带的
            `Taro` 组件：
          post: >
            注意到我们还把之前 `<View>添加新的帖子</View>` 去掉了，因为接下来我们会把表单放在浮动弹层 FloatLayout
            里面，所以就不需要这行提示啦。



            ::: info

            **提示**


            你也许会好奇为啥 Taro UI 的组件都以 `At` 开头？一个是为了与普通的 Taro 组件区分，另一个则是因为开发 Taro
            团队正是 [Aotu.io 凹凸实验室](https://aotu.io/)。

            :::
      - file: src/components/PostForm/index.scss
        display: true
        explain:
          pre: 调整 `PostForm` 组件的样式，代码如下：
      - file: src/pages/index/index.jsx
        display: true
        explain:
          pre: >-
            正如之前所说，我们打算把创建新帖子的表单放在浮动弹层 FloatLayout 中。在首页模块
            `src/pages/index/index.jsx` 中导入相关组件，代码如下：
          post: >-
            我们来逐一分析新添加的代码：


            - 首先从 `taro-ui` 导入所需的 `AtFab`、`AtFloatLayout` 和 `AtMessage` 组件

            - 使用 `useState` Hook 创建新的状态 `isOpened`（用于记录浮动弹层是否打开）和用于修改状态的
            `setIsOpened`

            - 在 `handleSubmit` 中，用 `setIsOpened(false)` 关闭浮动弹层，并用
            `Taro.atMessage` 弹出提示消息

            - 在 `return` JSX 代码时，添加 `<AtMessage />` 组件，并在之前的 `PostForm` 组件外层包裹
            `AtFloatLayout` 组件，最后添加浮动按钮 `AtFab`
      - file: src/pages/index/index.scss
        display: true
        explain:
          pre: 在首页样式文件 `src/pages/index/index.scss` 中添加样式如下：
      - file: src/components/PostCard/index.jsx
        display: true
        explain:
          pre: >-
            ### 升级 PostCard


            接着我们来调整 `PostCard`
            在不同页面的样式。[classnames](https://www.npmjs.com/package/classnames)
            是最常用的 CSS 类组合库，可以让你用 JavaScript 表达式灵活地进行 CSS 类的组合。例如我们有三个 CSS 类
            `foo`、`bar` 和 `foo-bar`，可以通过 `classNames` 函数进行条件式组合：


            ```javascript

            import classNames from 'classnames`;


            classNames('foo', 'bar'); // => 'foo bar'

            classNames('foo', { bar: true }); // => 'foo bar'

            classNames({ 'foo-bar': true }); // => 'foo-bar'

            classNames({ 'foo-bar': false }); // => ''

            classNames({ foo: true }, { bar: true }); // => 'foo bar'

            classNames({ foo: true, bar: true }); // => 'foo bar'

            ```


            我们也新增加一个 CSS 类 `postcard__isList`，用于表示在帖子列表中的样式。修改
            `src/components/PostCard/index.jsx` 代码如下：
      - file: src/components/PostCard/index.scss
        display: true
        explain:
          pre: 修改 `PostCard` 组件的样式，代码如下：
      - file: src/custom-theme.scss
        display: true
        explain:
          pre: >-
            ### 定制主题颜色


            Taro UI
            支持一定程度的[主题定制](https://taro-ui.jd.com/#/docs/customizetheme)，这里我们采用最简单却也十分有效的
            **SCSS 变量覆盖**。我们创建 `src/custom-theme.scss`，代码如下：
          post: >
            可以看到，我们定义了三个 SCSS 变量 `$color-brand`、`$color-brand-light` 和
            `$color-brand-dark`，覆盖了 Taro UI 的默认主题色。



            ::: info

            **提示**


            欲查看所有可以覆盖的 SCSS 变量，请参考 Taro UI
            的[默认样式文件](https://github.com/NervJS/taro-ui/blob/dev/src/style/variables/default.scss)。如果不熟悉
            SCSS 变量，这份[指南](https://www.sass.hk/guide/)是不错的资料。

            :::
      - file: src/app.scss
        display: true
        explain:
          pre: 紧接着我们需要在项目的全局样式文件 `src/app.scss` 中导入自定义颜色主题文件，代码如下：
          post: >-
            可以看到，除了导入了刚刚创建的 `custom-theme.scss`，我们还**按需引入**了 Taro UI
            中所用到组件的样式，这样可以有效减少打包后应用体积的大小哦。
      - file: yarn.lock
    explain:
      pre: >
        在编写用户界面时，如果每次都要自己编写组件逻辑、调整组件样式，对于学习来说是完全可以的，但是对于实际开发任务就显得很麻烦了。在 React
        社区，我们有诸如 [Ant Design](https://github.com/ant-design/ant-design)
        这样的组件库，能够让我们快速搭建一套专业美观的界面。而 Taro 也提供了 [Taro
        UI](https://taro-ui.jd.com/#/) 组件库，为我们提供了能够适应多端的成熟组件。在这一步中，我们将用 Taro UI
        升级界面，让它看上去更像一个成熟的小程序。


        不过与之前不同，我们将先贴出完成这一步后的 demo 展示：


        ![](tuture-assets/taro-demo3.gif)


        可以看到我们做了三点改进：


        -
        通过点击一个[浮动按钮（Fab）](https://taro-ui.jd.com/#/docs/fab)来触发创建新文章的[浮动弹层（FloatLayout）](https://taro-ui.jd.com/#/docs/floatlayout)

        - 发布成功后，会显示一条温馨的[消息提示（Message）](https://taro-ui.jd.com/#/docs/message)

        - 帖子详情页面中 PostCard 组件去掉了边框，让它看上去更像正文展示


        ### 配置 Taro UI


        首先安装 Taro UI 的 npm 包：


        ```bash

        npm install taro-ui

        ```


        为了后续能在 H5 中使用 taro-ui，我们需要在 `config/index.js` 中添加如下配置：


        ```javascript

        h5: {
          esnextModules: ['taro-ui']
        }

        ```
      post: >-
        完成这一步的代码后，记得在模拟器里面看看运行起来是不是跟开头的 GIF demo 效果完全一致哦！


        至此，《Taro
        多端小程序开发大型实战》第二篇也就结束啦。欢迎继续阅读[第三篇](https://tuture.co/2019/12/25/5e10118/)，我们将手把手带大家用实现如何在
        Taro 框架下实现多端登录（微信小程序 + 支付宝小程序 + 普通登录）。
  - name: 多端登录，群魔乱舞
    commit: 1da2fee
    diff:
      - file: config/index.js
        display: true
        explain:
          pre: >-
            #### 配置 Babel 插件


            从这一步开始，我们将首次开始写异步代码。本项目将采用流行的 async/await 来编写异步逻辑，因此我们配置一下相应的 Babel
            插件：


            ```bash

            npm install babel-plugin-transform-runtime --save-dev

            # yarn add babel-plugin-transform-runtime -D

            ```


            然后在 `config/index.js` 中为 `config.babel.plugins` 添加相应的配置如下：
      - file: package.json
        display: false
      - file: src/components/LoginButton/index.js
        display: true
        explain:
          pre: >-
            ### 各组件的实现


            #### 实现 LoginButton


            首先，我们来实现普通登录按钮 `LoginButton` 组件。创建 `src/components/LoginButton`
            目录，在其中创建 `index.js`，代码如下：
          post: 我们使用了 Taro UI 的 `AtButton` 组件，并定义了一个 `handleClick` 事件，后面在使用时会传入。
      - file: src/components/WeappLoginButton/index.js
        display: true
        explain:
          pre: >-
            #### 实现 WeappLoginButton


            接着我们实现微信登录按钮 `WeappLoginButton`。创建 `src/components/WeappLoginButton`
            目录，在其中分别创建 `index.js` 和 `index.scss`。`index.js` 代码如下：
          post: >-
            可以看到，微信登录按钮和之前的普通登录按钮多了很多东西：


            - 添加了 `isLogin` 状态，用于表示是否在等待登录中，以及修改状态的 `setIsLogin` 函数

            - 实现了 `onGetUserInfo` async
            函数，用于处理在用户点击登录按钮、获取到信息之后的逻辑。其中，我们将获取到的用户信息传入 `props` 中的
            `setLoginInfo`，从而修改整个应用的登录状态

            - 添加了 `openType`（微信开放能力）属性，这里我们输入的是 `getUserInfo`（获取用户信息），欲查看所有支持的
            open-type，请查看[微信开放文档对应部分](https://developers.weixin.qq.com/miniprogram/dev/component/button.html)

            - 添加了 `onGetUserInfo` 这个 handler，用于编写在获取到用户信息后的处理逻辑，这里就是传入刚刚实现的
            `onGetUserInfo`
      - file: src/components/WeappLoginButton/index.scss
        display: true
        explain:
          pre: '`WeappLoginButton` 的样式 `index.scss` 代码如下：'
      - file: src/components/AlipayLoginButton/index.js
        display: true
        explain:
          pre: >-
            #### 实现 AlipayLoginButton


            让我们来实现支付宝登录按钮组件。创建 `src/components/AlipayLoginButton` 目录，在其中分别创建
            `index.js` 和 `index.scss`。`index.js` 代码如下：
          post: >
            可以看到，内容与之前的微信登录按钮基本相似，但是有以下差别：


            - 实现 `onGetAuthorize` 回调函数。与之前微信的回调函数不同，这里我们要调用
            `Taro.getOpenUserInfo` 手动获取用户基础信息（实际上调用的是支付宝开放平台
            [my.getOpenUserInfo](https://docs.alipay.com/mini/api/ch8chh)）

            - `Button` 组件的 `openType`（支付宝开放能力）设置成 `getAuthorize`（小程序授权）

            - 在设定开放能力为 `getAuthorize` 时，需要添加 `scope` 属性为
            `userInfo`，让用户可以授权小程序获取支付宝会员的基础信息（另一个有效值是 `phoneNumber`，用于获取手机号码）

            - 传入 `onGetAuthorize` 回调函数


            ::: info

            **提示**


            关于支付宝小程序登录按钮的细节，可以查看[官方文档](https://docs.alipay.com/mini/component/button)。

            :::
      - file: src/components/AlipayLoginButton/index.scss
        display: true
        explain:
          pre: 样式文件 `index.scss` 的代码如下：
      - file: src/components/LoggedMine/index.jsx
        display: true
        explain:
          pre: >-
            #### 实现 LoggedMine


            接着我们实现已经登录状态下的 `LoggedMine` 组件。创建 `src/components/LoggedMine`
            目录，在其中分别创建 `index.jsx` 和 `index.scss`。`index.jsx` 代码如下：
          post: >-
            这里我们添加了点击头像可以预览的功能，可以通过 [`Taro.previewImage`
            函数](https://nervjs.github.io/taro/docs/apis/multimedia/images/previewImage.html#docsNav)实现。
      - file: src/components/LoggedMine/index.scss
        display: true
        explain:
          pre: '`LoggedMine` 组件的样式文件如下：'
      - file: src/components/Header/index.js
        display: true
        explain:
          pre: >-
            #### 实现 Header 组件


            在所有的“小零件”全部实现后，我们就实现整个登录界面的 `Header` 部分。创建 `src/components/Header`
            目录，在其中分别创建 `index.js` 和 `index.scss`。`index.js` 代码如下：
          post: >
            可以看到，我们根据 `Taro.ENV_TYPE` 查询当前所在的平台（微信、支付宝或其他），然后确定是否显示相应平台的登录按钮。



            ::: info

            **提示**


            你也许发现了，`setLoginInfo` 还是要等待父组件的传入。虽然 Hooks
            简化了状态的定义和更新方式，但是却没有简化跨组件修改状态的逻辑。在接下来的一步，我们将用 Redux 进行简化。

            :::
      - file: src/components/Header/index.scss
        display: true
        explain:
          pre: '`Header` 组件的样式代码如下：'
      - file: src/components/LoginForm/index.jsx
        display: true
        explain:
          pre: >-
            #### 实现 LoginForm


            接着我们实现用于普通登录的 `LoginForm` 组件。由于本系列教程的目标是讲解
            Taro，因此这里简化了注册/登录的流程，用户可以直接输入用户名并上传头像进行注册/登录，无需设置密码和其他验证过程。创建
            `src/components/LoginForm` 目录，在其中分别创建 `index.jsx` 和
            `index.scss`。`index.jsx` 代码如下：
          post: >-
            这里我们使用 Taro UI 的 [ImagePicker
            图片选择器组件](https://taro-ui.jd.com/#/docs/imagepicker)，让用户能够选择图片进行上传。`AtImagePicker`
            最重要的属性就是 `onChange` 回调函数，这里我们通过父组件传进来的 `handleFilesSelect` 函数来搞定。
      - file: src/components/LoginForm/index.scss
        display: true
        explain:
          pre: '`LoginForm` 组件的样式代码如下：'
      - file: src/components/Logout/index.js
        display: true
        explain:
          pre: |-
            #### 实现 Logout

            在登录之后，我们还需要退出登录的按钮。创建 `src/components/Logout/index.js` 文件，代码如下：
      - file: src/components/Footer/index.js
        display: true
        explain:
          pre: >-
            #### 实现 Footer


            所有的子组件全部实现之后，我们就来实现 `Footer` 组件。创建 `src/components/Footer`
            目录，在其中分别创建 `index.jsx` 和 `index.scss`。`index.jsx` 代码如下：
      - file: src/components/Footer/index.scss
        display: true
        explain:
          pre: '`Footer` 组件的样式文件代码如下：'
      - file: src/components/index.jsx
        display: true
        explain:
          pre: >-
            所有小组件都搞定之后，我们在 `src/components` 中只需暴露出 `Header` 和 `Footer`。修改
            `src/components/index.jsx`，代码如下：
      - file: src/pages/mine/mine.jsx
        display: true
        explain:
          pre: >-
            ### 更新“我的”页面


            是时候用上写好的 `Header` 和 `Footer` 组件了，但在此之前，我们先来讲一下我们需要用到的 `useEffect`
            Hooks。


            #### useEffect Hooks


            `useEffect` Hooks 是用来替代原 React 的生命周期钩子函数的，我们可以在里面发起一些 “副作用”
            操作，比如异步获取后端数据、设置定时器或是进行 DOM 操作等：


            ```JavaScript

            import React, { useState, useEffect } from 'react';


            function Example() {
              const [count, setCount] = useState(0);

              // 和 componentDidMount 以及 componentDidUpdate 类似:
              useEffect(() => {
                // 使用浏览器 API 更新 document 的标题
                document.title = `你点击了 ${count} 次`;
              });

              return (
                <div>
                  <p>你点击了 {count} 次</p>
                  <button onClick={() => setCount(count + 1)}>
                    点我
                  </button>
                </div>
              );
            }

            ```


            上面的对 `document` 标题的修改是具有副作用的操作，在之前的 React 应用中，我们通常会这么写：


            ```JavaScript

            class Example extends React.Component {
              constructor(props) {
                super(props);
                this.state = {
                  count: 0
                };
              }

              componentDidMount() {
                document.title = `你点击了 ${this.state.count} 次`;
              }

              componentDidUpdate() {
                document.title = `你点击了 ${this.state.count} 次`;
              }

              render() {
                return (
                  <div>
                    <p>你点击了 {this.state.count} 次</p>
                    <button onClick={() => this.setState({ count: this.state.count + 1 })}>
                      点我
                    </button>
                  </div>
                );
              }
            }

            ```


            如果你想了解 `useEffect` 具体的详情，可以去查看 React
            的[官方文档](https://zh-hans.reactjs.org/docs/hooks-effect.html)。


            做的好！了解了 `useEffect` Hooks 的概念之后，我们马上来更新“我的”页面组件
            `src/pages/mine/mine.jsx`，代码如下：
          post: >-
            可以看到，我们做了这么些工作：


            - 使用 `useState` 创建了四个状态：用户有关信息（`nickName` 和
            `avatar`），登录弹出层是否打开（`isOpened`），是否登录成功（`isLogged`），以及相应的更新函数

            - 通过 `useEffect` Hook
            尝试从本地缓存中获取用户信息（[Taro.getStorage](https://nervjs.github.io/taro/docs/apis/storage/getStorage.html#docsNav)），并用来更新
            `nickName` 和 `avatar` 状态

            - 实现了久违的 `setLoginInfo` 函数，其中我们不仅更新了 `nickName` 和 `avatar`
            的状态，还把用户数据存入本地缓存（[Taro.getStorage](https://nervjs.github.io/taro/docs/apis/storage/setStorage.html#docsNav)），确保下次打开时保持登录状态

            - 实现了同样久违的 `handleLogout`
            函数，其中不仅更新了相关状态，还去掉了本地缓存中的数据（[Taro.removeStorage](https://nervjs.github.io/taro/docs/apis/storage/removeStorage.html#docsNav)）

            - 实现了用于处理普通登录的 `handleSubmit` 函数，内容基本上与 `setLoginInfo` 一致

            - 在返回 JSX 代码时渲染 `Header` 和 `Footer` 组件，传入相应的状态和回调函数
      - file: src/pages/mine/mine.scss
        display: true
        explain:
          pre: 调整 `Mine` 组件的样式 `src/pages/mine/mine.scss` 代码如下：
      - file: src/app.scss
        display: true
        explain:
          pre: 最后在 `src/app.scss` 中引入相应的 Taro UI 组件的样式：
      - file: yarn.lock
    explain:
      pre: >-
        欢迎继续阅读《Taro 小程序开发大型实战》系列，前情回顾：


        - [熟悉的 React，熟悉的 Hooks](https://tuture.co/2019/12/25/34a473b/)：我们用 React
        和 Hooks 实现了一个非常简单的添加帖子的原型

        - [多页面跳转和 Taro UI 组件库](https://tuture.co/2019/12/25/af69225/)：我们用 Taro
        自带的路由功能实现了多页面跳转，并用 Taro UI 组件库升级了应用界面


        而在这一篇中，我们将实现微信和支付宝多端登录。如果你希望直接从这一篇开始，请运行以下命令：


        ```bash

        git clone -b third-part https://github.com/tuture-dev/ultra-club.git

        cd ultra-club

        ```


        与普通的 Web
        应用相比，小程序能够在所在的平台实现一键登录，非常方便。这一步，我们也将实现多端登录（主要包括微信登录和支付宝登录）。之所以标题取为“群魔乱舞”，不仅受了“震惊”小编们的启发，也是因为当今各平台处理登录和鉴权的方式差异很大，很遗憾的是在
        Taro 框架下我们依然需要踩很多“坑”才能真正实现“多端登录”。


        ### 准备工作


        #### 前提条件


        在正式开始之前，我们希望你已经具备以下知识：


        - 基本的 React 框架知识，可参考[这篇文章](https://tuture.co/2019/11/18/07acf61/)进行学习

        - 对常用的 React Hooks （`useState`、`useEffect`）有所了解，后面图雀社区将推出 “一杯茶的时间，上手
        React Hooks”，敬请期待！


        *除此之外，你还需要下载并安装[支付宝开发者工具](https://docs.alipay.com/mini/ide/download)，登录后创建自己的小程序
        ID。*


        #### 组件设计规划


        这一节的代码很长，在正式开始之前我们先查看一下组件设计的规划，便于你对接下来我们要做的工作有清晰的了解。


        ![](tuture-assets/components.png)


        可以看到“我的”页面整体拆分成了 `Header` 和 `Footer`：


        - `Header` 包括 `LoggedMine`（个人信息），如果在未登录状态下则还有
        `LoginButton`（普通登录按钮）、`WeappLoginButton`（微信登录按钮，仅在微信小程序中出现）以及
        `AlipayLoginButton`（支付宝登录按钮，仅在支付宝小程序中出现）

        - `Footer` 则用来显示是否已登录的文字，在已登录的情况下会显示 `Logout`（退出登录按钮）
      post: >-
        ### 查看效果


        敲了这么多代码，终于又到了神圣的验收环节。首先是普通登录：


        ![](tuture-assets/taro-demo4.gif)


        而微信和支付宝登录，点击之后就会直接以登录开发者工具所用的帐号登录了。下面贴出我微信和支付宝登录后的界面展示：


        ![](tuture-assets/logged-squashed.jpg)


        登录后点击下方的“退出登录”按钮，就会将当前登录帐户注销哦。


        至此，《Taro
        多端小程序开发大型实战》第三篇也就结束啦。在接下来的[第四篇](https://tuture.co/2019/12/25/5e100f7/)中，我们将逐步用
        Redux 来重构业务数据流，让我们现在略显臃肿的状态管理变得清晰可控。
  - name: 双剑合璧：Hooks + Redux
    commit: a3cf715
    diff:
      - file: package.json
        display: true
        explain:
          pre: >-
            ### 安装依赖


            首先我们先来安装使用 Redux 必要的依赖：


            ```Bash

            $ yarn add redux @tarojs/redux @tarojs/redux-h5  redux-logger

            # 或者使用 npm

            $ npm install --save redux @tarojs/redux @tarojs/redux-h5
            redux-logger

            ```
          post: >-
            可以看到，除了我们熟悉的 `redux` 依赖，以及用来打印 Action 的中间件 `redux-logger`
            外，还有两个额外的包，这是因为在 Taro 中，Redux 原绑定库 `react-redux` 被替换成了
            `@tarojs/redux` 和 `@tarojs/redux-h5`，前者用在小程序中，后者用在 H5 页面中，Taro 对原
            `react-redux` 进行了封装并提供了与 react-redux API 几乎一致的包来让开发人员获得更加良好的开发体验。
      - file: src/store/index.js
        display: true
        explain:
          pre: >-
            ### 创建 Redux Store


            Redux 的三大核心概念为：Store，Action，Reducers：


            - Store：保存着全局的状态，有着 ”数据的唯一真相来源之称“。

            - Action：发起修改 Store 中保存状态的动作，是修改状态的唯一手段。

            - Reducers：一个个的纯函数，用于响应 Action，对 Store 中的状态进行修改。


            好的，复习了一下 Redux 的概念之后，我们马上来创建 Store，Redux 的最佳实践推荐我们在将 Store 保存在
            `store` 文件夹中，我们在 `src` 文件夹下面创建 `store` 文件夹，并在其中创建 `index.js` 来编写我们的
            Store：
          post: >+
            可以看到，我们导出了一个 `configureStore` 函数，并在其中创建并返回 Store，这里我们用到了
            `redux-logger` 中间件，用于在发起 Action 时，在控制台打印 Action 及其前后 Store
            中的保存的状态信息。


            这里我们的 `createstore` 接收两个参数：`rootReducer` 和
            `applyMiddleware(...middlewares)` 。


            `rootReducer` 是响应 `action` 的 `reducer`，这里我们导出了一个
            `rootReducer`，代表组合了所有的 `reducer` ，我们将在后面 "组合 User 和 Post Reducer“
            中讲到它。


            `createStore` 函数的第二个参数我们使用了 `redux` 为我们提供的工具函数 `applyMiddleware` 来在
            Redux 中注入需要使用的中间件，因为它接收的参数是 `(args1, args2, args3, ..., argsn)`
            的形式，所以这里我们用了数组展开运算符 `...` 来展开 `middlewares` 数组。


      - file: src/reducers/user.js
        display: true
        explain:
          pre: >-
            ### 编写 User Reducer


            创建完 Store 之后，我们接在来编写 Reducer。回到我们的页面逻辑，我们在底部有两个 Tab 栏，一个为 "首页"，一个为
            "我的"，在 ”首页“ 里面主要是展示一列文章和允许添加文章等，在 ”我的“
            里面主要是允许用户进行登录并展示登录信息，所以整体上我们的逻辑有两类，我们分别将其命名为 `post` 和
            `user`，接下来我们将创建处理这两类逻辑的 reducers。


            Reducer 的逻辑形如 `(state, action) => newState`，即接收上一步 state 以及修改 state
            的动作 action，然后返回修改后的新的 state，它是一个纯函数，意味着我们不能突变的修改  state。


            推荐：


            ```JavaScript

            newState = { ...state, prop: newValue }

            ```


            不推荐：


            ```JavaScript

            state.prop = newValue

            ```


            Redux 推荐的最佳实践是创建独立的 `reducers` 文件夹，在里面保存我们的一个个 reducer 文件。我们在 `src`
            文件夹下创建 `reducers` 文件夹，在里面创建 `user.js` 文件，并加入我们的 User Reducer
            相应的内容如下：
          post: >
            我们在 `user.js`  中申明了 User Reducer 的初始状态 `INITIAL_STATE`，并将它赋值给 `user`
            函数 state 的默认值，它接收待响应的 action，在 `user` 函数内部就是一个 `switch` 语句根据
            `action.type` 进行判断，然后执行相应的逻辑，这里我们主要有两个类型：`SET_IS_OPENED` 用于修改
            `isOpened` 属性，`SET_LOGIN_INFO` 用于修改 `avatar` 和 `nickName` 属性，当
            `switch` 语句中没有匹配到任何 `action.type` 值时，它返回原 state。



            ::: info

            **提示**


            根据 Redux 最近实践，这里的 `SET_IS_OPENED` 和 `SET_LOGIN_INFO` 常量一般保存到
            `constants` 文件夹中，我们将马上创建它。这里使用常量而不是直接硬编码字符串的目的是为了代码的可维护性。

            :::
      - file: src/constants/user.js
        display: true
        explain:
          pre: >-
            接下来我们来创建 `src/reducer/user.js` 中会用到的常量，我们在 `src`  文件夹下创建 `constants`
            文件夹，并在其中创建 `user.js` 文件，在其中添加内容如下：
      - file: src/reducers/post.js
        display: true
        explain:
          pre: >-
            ### 编写 Post Reducer


            为了响应 `post` 逻辑的状态修改，我们创建在 `src/reducers` 下创建
            `post.js`，并在其中编写相应的内容如下：
          post: "可以看到，\_Post Reducer 的形式和 User Reducer 类似，我们将之前需要多组件中共享的状态 `posts` 和 `isOpened` 提取出来保存在 `post` 的状态里，这里的 `post` 函数主要响应 `SET_POSTS` 逻辑，用于添加新的 `post` 到 `posts` 状态种，以及 `SET_POST_FORM_IS_OPENED` 逻辑，用户设置 `isOpened` 状态。"
      - file: src/constants/post.js
        display: true
        explain:
          pre: >-
            接下来我们来创建 `src/reducer/post.js` 中会用到的常量，我们在 `src/constants`  文件夹下创建
            `user.js` 文件，在其中添加内容如下：
          post: ''
      - file: src/constants/index.js
        display: true
        explain:
          pre: >-
            眼尖的同学可能注意到了，我们在 `src/reducers/user.js` 和 `src/reducers/post.js`
            中导入需要使用的常量时都是从 `../constants`  的形式，那是因为我们在 `src/constants` 文件夹下创建了一个
            `index.js` 文件，用于统一导出所有的常量，这也是代码可维护性的一种尝试。
      - file: src/reducers/index.js
        display: true
        explain:
          pre: >-
            ### 组合 User 和 Post Reducer


            我们在之前将整个全局的响应逻辑分别拆分到了 `src/reducers/user.js` 和
            `src/reducers/post.js` 中，这使得我们可以把响应逻辑拆分到很多个很小的函数单元，极大增加了代码的可读性和可维护性。


            但最终我们还是要将这些拆分的逻辑组合成一个逻辑树，并将其作为参数传给 `createStore` 函数来使用。


            Redux 为我们提供了 `combineReducers` 来组合这些拆分的逻辑，我们在 `src/reducers` 文件夹下创建
            `index.js` 文件，并在其中编写如下内容：
          post: "可以看到，我们导入了 `user.js` 和 `post.js`，并使用对象简介写法传给 `combineReducers` 函数并导出，通过 `combineReducers` 将逻辑进行组合并导出为 `rootReducer` 作为参数在我们的 `src/store/index.js` 的 `createStore` 函数中使用。\n\n这里的 `combineReducers` 函数主要完成两件事：\n\n- 组合 user Reducer 和 post Reducer 中的状态，并将其合并成一颗形如 `{ user, post }` 的状态树，其中 `user` 属性保存这 user Reducer 的状态，`post` 属性保存着 post Reducer 的状态。\n- 分发 Action，当组件中 `dispatch`  一个 Action，\_`combineReducers` 会遍历 user Reducer 和 post Reducer，当匹配到任一 Reducer 的 `switch` 语句时，就会响应这个 Action。\n\n\n::: info\n**提示**\n\n我们将马上在之后讲解如何在组件中 `dispatch` Action。\n:::\n \n\n"
      - file: project.config.json
        display: false
      - file: src/app.jsx
        display: true
        explain:
          pre: >-
            ### 整合 Redux 和 React


            当我们编写了 reducers 创建了 store 之后，下一步要考虑的就是如何将 Redux 整合进 React，我们打开
            `src/app.js`，对其中的内容作出如下修改：
          post: >-
            可以看到，上面的内容主要修改了三部分：


            - 我们导入了 `configureStore`，并调用它获取 `store`。

            - 接着我们从 Redux 对应的 Taro 绑定库 `@tarojs/redux` 中导出 `Provider`，它架设起 Redux
            和 React 交流的桥梁。

            - 最后我们用 `Provider` 包裹我们之前的根组件，并将 `store` 作为其属性传入，这样后续的组件就可以通过获取到
            `store` 里面保存的状态。
      - file: src/components/LoginButton/index.js
        display: true
        explain:
          pre: >+
            ### Hooks 版的 Action 初尝鲜


            准备好了 Store 和 Reducer，又整合了 Redux 和 React，是时候来体验一下 Redux
            状态管理容器的先进性了，不过为了使用 Hooks 版本的 Action，这里我们先来讲一讲会用到的 Hooks。


            #### useDispatch Hooks


            这个 Hooks 返回 Redux store 的 `dispatch` 引用。你可以使用它来 dispatch actions。


            讲完  useDispatch Hooks，我们马上来实践一波，首先搞定我们 ”普通登录“ 的 Redux 化问题，让我们打开
            `src/components/LoginButton/index.js`，对其中内容作出相应的修改如下：

          post: >-
            可以看到，上面的内容主要有四块改动：


            - 首先我们从 `@tarojs/redux` 中导出 `useDispatch` API。

            - 接着我们从之前定义的常量文件中导出 `SET_IS_OPENED` 常量。

            - 然后，我们在 `LoginButton` 函数式组件中调用 `useDispatch` Hooks 来返回我们的
            `dispatch` 函数，我们可以用它来 dispatch action 来修改 Redux store 的状态

            - 最后我们将 `AtButton` 的 `onClick` 接收的回调函数进行替换，当按钮点击时，我们发起一个 `type` 为
            `SET_IS_OPENED` 的 action，并传递了一个 `payload` 参数，用于将 Redux store 里面对应的
            `user` 属性中的 `isOpened` 修改为 `true`。
      - file: src/components/WeappLoginButton/index.js
        display: true
        explain:
          pre: >-
            搞定完 ”普通登录“，我们接着来收拾一下 ”微信登录“ 的逻辑，打开
            `src/components/WeappLoginButton/index.js` 文件，对文件的内容作出如下修改：
          post: >-
            可以看到，上面的改动和之前在 ”普通登录“ 里面的改动类似：


            - 我们导出了 `useDispatch` 钩子

            - 导出了 `SET_LOGIN_INFO` 常量

            - 然后我们将之前调用父组件传下的 `setLoginInfo`  方法改成了 dispatch `type` 为
            `SET_LOGIN_INFO` 的 action，因为我们的 `avatar` 和 `nickName` 状态已经在 `store`
            中的 `user` 属性中定义了，所以我们修改也是需要通过 dispatch action 来修改，最后我们将之前定义在父组件中的
            `Taro.setStorage` 设置缓存的方法移动到了子组件中，以保证相关信息的改动具有一致性。
      - file: src/components/AlipayLoginButton/index.js
        display: true
        explain:
          pre: >-
            最后我们来搞定 ”支付宝登录“ 的 Redux 逻辑，打开
            `src/components/AlipayLoginButton/index.js` 对文件内容作出对应的修改如下：
          post: '可以看到，上面的改动和之前在 ”微信登录“ 里面的改动几乎一样，所以这里我们就不在重复讲解啦 :)'
      - file: src/components/LoggedMine/index.jsx
        display: true
        explain:
          pre: >-
            ### useSelector Hooks 来捧场


            一路跟下来的同学可能有点明白我们正在使用 Redux 我们之前的代码，而我们重构的思路也是先从
            `src/pages/mine/mine.jsx` 中的 `src/components/Header/index.jsx`
            开始，搞定完 `Header.jsx` 里面的所有登录按钮之后，接下来应该就轮到 `Header.jsx` 内的最后一个组件
            `src/components/LoggedMine/index.jsx`  了。


            因为在 `LoggedMine` 组件中我们要用到 useSelector Hooks，所以这里我们先来讲一下这个 Hooks。


            #### useSelector Hooks


            `useSelector` 允许你使用 selector 函数从一个 Redux Store 中获取数据。


            Selector 函数大致相当于 `connect` 函数的 `mapStateToProps` 参数。Selector
            会在组件每次渲染时调用。`useSelector` 同样会订阅 Redux store，在 Redux action 被
            dispatch 时调用。


            但 `useSelector` 还是和 `mapStateToProps` 有一些不同：


            - 不像 `mapStateToProps` 只返回对象一样，Selector 可能会返回任何值。

            - 当一个 action dispatch 时，`useSelector` 会把 selector
            的前后返回值做一次浅对比，如果不同，组件会强制更新。

            - Selector 函数不接受 `ownProps` 参数。但 selector 可以通过闭包访问函数式组件传递下来的 props。


            好的，了解了 `useSelector` 的概念之后，我们马上来实操一下，打开
            `src/components/LoggedMine/index.jsx` 文件，对其中的内容作出如下的修改：
          post: >-
            可以看到，我们上面的代码主要有四处改动：


            - 首先我们从 `@tarojs/redux` 中导出了  `useSelector` Hooks。

            - 接着我们使用了两次 `useSelector` 分别从 Redux Store 里面获取了 `nickName` 和
            `avatar`，它们位于 `state.user` 属性下。

            - 接着我们将之前从 `props` 里面获取到的 `nickName` 和 `avatar` 替换成我们从 Redux store
            里面获取到状态，这里我们为了用户体验，从 `taro-ui` 中导出了一个 `AtAvatar` 组件用于展示在没有 `avatar`
            时的默认头像。

            - 最后，在点击头像进行预览的 `onImageClick` 方法里面，我们使用从 Redux store 里面获取到的
            `avatar`。
      - file: src/components/Header/index.js
        display: true
        explain:
          pre: >-
            是时候收割最后一波 ”韭菜“ 了，让我们彻底完成 `Header/index.js` 的 Redux 化，打开
            `src/components/Header/index.js` ，对其中的内容做出相应的修改如下：
          post: >-
            可以看到，上面的代码主要有五处主要的变动：


            - 首先我们导出了 `useSelector` Hooks。

            - 接着我们使用 `useSelector` 中取到我们需要的 `nickName` 属性，用于进行双取反转换成布尔值
            `isLogged`，表示是否登录。

            - 接着我们将之前从父组件获取的 `props.isLogged` 属性替换成新的从 `isLogged` 值

            - 接着，我们去掉 ”普通登录” 按钮上不再需要的 `handleClick` 属性和 “微信登录”、“支付宝登录” 上面不再需要的
            `setLoginInfo` 属性。

            - 最后，我们去掉 `LoggedMine` 组件上不再需要的 `userInfo` 属性，因为我们已经在组件内部从使用
            `useSelector` Hooks 从组件内部获取了。
      - file: src/components/Logout/index.js
        display: true
        explain:
          pre: >-
            ### 搞定 Footer 的 Redux 化


            本来这个小标题我是不想起的，但是因为，是吧，大家上面在没有小标题的情况下看了这么久，可能已经废（累）了，所以我就贴心的加上一个小标题，帮助你定位接下来讲解的重心。


            是的接下来，我们要重构 “我的" tab 页面中的下半部分组件 `src/components/Footer/index.js`
            我们遵循自顶向下的方式来重构，首先是 `src/components/Logout/index.js`
            文件，我们打开这个文件，对其中内容作出如下修改：
          post: >
            这一步可能是最能体现引入 Redux 进行状态管理带来好处的一步了 -- 我们将之前至上而下的 React
            状态管理逻辑压平，使得底层组件可以在自身中就解决响应的状态和逻辑问题。


            可以看到，我们上面的文件中主要有五处改动：


            - 首先我们从 `@tarojs/taro` 里面导出 `useState` Hooks。

            - 接着我们将之前在 `src/pages/mine/mine.js` 中定义的 `isLogout` 状态移动到组件 `Logout`
            组件内部来，因为它只和此组件有关系。

            - 接着我们用 `isLogout` 替换在 `AtButton` 里面用到的 `props.loading` 属性。

            - 然后，我们考虑将之前按钮点击调用 `props.handleLogout` Redux 化，我们将这个点击之后的回调函数
            `handleLogout` 在组件内部定义。

            - 最后，我们从 `@tarojs/redux` 中导入 `useDispatch` Hooks，并在组件中调用成我们需要的
            `dispatch` 函数，接着我们在 `handleLogout` 函数中去 dispatch 一个 `SET_LOGIN_INFO`
            action 来重置 Store 中的 `nickName` 和 `avatar` 属性。



            ::: info

            **提示**


            这里我们在组件内定义的 `handleLogout` 函数和我们之前在 `src/pages/mine/mine.js`
            中定义的类似，只是使用  dispatch action 的方式替换了重置 `nickName` 和 `avatar` 的部分。

            :::
      - file: src/components/LoginForm/index.jsx
        display: true
        explain:
          pre: |-
            搞定完 `Logout` 组件，接着就是 `LoginForm` 组件的重构了，让我们快马加鞭，让它也接受 Redux 光环的洗礼吧！

            打开 `src/components/LoginForm/index.jsx` ，对其中的内容作出相应的修改如下：
          post: "这一步和上一步类似，可能也是最能体现引入 Redux 进行状态管理带来好处的一步了，我们同样将之前在顶层组件中提供的状态压平到了底层组件内部。\n\n可以看到，我们上面的文件中主要有四处改动：\n\n- 首先我们将 `formNickName` 和 `files` 等状态放置到 `LoginForm` 组件内部，并使用 `useState` Hooks 管理起来，因为它们只和此组件有关系。\n- 接着，我们将 `AtImagePicker` 里面的 `props.files` 替换成 `files`，将它的 `onChange` 回调函数内部的设置改变状态的 `props.handleFilesSelect(files)` 替换成 `setFiles(files)`。可以看到这里我们还对 `files.length = 0` 的形式做了一个判断，当没有选择图片时，要把我们选择图片的按钮显示出来。\n- 接着，我们将 `Input` 组件的 `props.formNickName` 替换成 `formNickName`，将之前 `onInput` 接收的回调函数换成了 `setFormNickName` 的形式来设置 `formNickName` 的变化。\n- 接着，我们将之前提交表单需要调用的父组件方法 `props.handleSubmit` 移动到组件内部来定义，可以看到，这个 `hanldeSubmit` 组合了之前在 `src/components/Footer/index.jsx` 和 `src/pages/mine/mine.js` 组件里的 `handleSubmit` 逻辑：\n  -  首先使用 `e.preventDefault` 禁止浏览器默认行为。\n  - 接着进行数据验证，不合要求的数据就会被驳回并显示错误（其实这里应该显示警告 `warning`，当时写代码时石乐志\U0001F605）。\n  - 接着因为 `LoginForm` 表单数据要被清除，所以我们将选中图片的按钮又设置为可显示状态。\n  - 接着提示登录成功。\n  - 清空表单状态。\n  - 将登录数据缓存在 `storage` 里面，在 Taro 里面使用 `Taro.setStorage({ key, data })` 的形式来缓存，其中 `key` 是字符串，`data` 是字符串或者对象。\n   - 最后我们导出了 `useDispatch` Hooks，使用 `useDispatch` Hooks 生成的 `dispatch` 函数的引用来发起更新 Redux store 的 action 来更新本地数据，`type` 为 `SET_LOGIN_INFO` 的 action 用来更新用户登录信息，`type` 为 `SET_IS_OPENED` 的 action 用来更新 `isOpened` 属性，它将关闭展示登录框的弹出层 `FloatLayout` 组件。\n"
      - file: src/components/Footer/index.js
        display: true
        explain:
          pre: >-
            讲到这里，我们的 `Footer` 部分的重构大业还剩下临门一脚了。让我们打开
            `src/components/Footer/index.js` 文件，立马来重构它：
          post: >-
            可以看到上面的代码主要有五处改动：


            - 首先我们已经将 `nickName` 抽取到 Redux store 保存的状态中，所以之前从父组件获取的
            `props.isLogged` 判断是否登录的信息，我们移动到组件内部来，使用 `useSelector` Hooks 从 Redux
            store 从获取 `nickName` 属性，进行双取反操作成布尔值来表示是否已经登录的 `isLogged`
            属性，并使用它来替换之前的 `props.isLogged` 属性。

            - 接着，就是取代之前从父组件获取的 `props.isOpened` 属性，我们使用 `useSelector` Hooks 从
            Redux store 中获取对应的 `isOpened` 属性，然后替换之前的
            `props.isOpened`，用户控制登录框窗口的弹出层 `AtFloatLayout` 的打开和关闭。

            - 接着，我们将之前 `AtFloatLayout` 关闭时（`onClose`）的回调函数替换成 dispatch 一个 `type`
            为 `SET_IS_OPENED` 的 action 来设置 `isOpened` 属性将 `AtFloatLayout` 关闭。

            - 接着，我们开始移除 `Logout` 和 `LoginForm`
            组件上不再需要传递的属性，因为在对应的组件中我们已经声明了对应的属性了。

            - 最后，我们删掉之前定义在 `Footer` 组件内的 `formNickName` 和 `files` 等状态，以及不再需要的
            `handleSubmit` 函数，因为它已经在 `LoginForm` 里面定义了。
      - file: src/pages/mine/mine.jsx
        display: true
        explain:
          pre: "### 完成 “我的” 页面重构\n\n熟悉套路的同学可能都知道起这个标题的含义了吧 \U0001F60F。\n\n我们一路打怪重构到这里，相比眼尖的人已经摸清楚 Redux 的套路了，结合 Redux 来写 React 代码，就好比 “千里之堤，始于垒土” 一般，我们先把所有细小的分支组件搞定，进而一步一步向顶层组件进发，以完成所有组件的编写。\n\n而这个 `src/pages/mine/mine.jsx` 组件就是 “我的” 这一 tab 页面的顶层组件了，也是我们在 “我的” 页面需要重构的最后一个页面了，是的，我们马上就要达到第一阶段性胜利了✌️。现在就打开这个文件，对其中的内容作出如下的修改："
          post: "可以看到，上面的代码做了一下五处改动：\n\n- 我们导入了 `useDispatch` Hooks 和 `SET_LOGIN_INFO` 常量，并把之前在 `getStorage` 方法里面设置 `nickName` 和 `avatar` 的操作替换成了 dispatch 一个 `type` 为 `SET_LOGIN_INFO` 的 action。\n- 接着我们删除不再需要的 `formNickName`、`files`、`isLogout`、`isOpened` 状态，以及 `setLoginInfo`、`handleLogout`、`handleSetIsOpened`、`handleClick` 、`handleSubmit` 方法。\n- 最后我们删除 `Header` 和 `Footer` 组件上不再不需要的属性。\n\n\n大功告成\U0001F948！这里给你颁发一个银牌，以奖励你能一直坚持阅读并跟到这里，我们这一篇教程很长很长，能跟下来的都不容易，希望你能在心里或用实际行动给自己鼓鼓掌\U0001F44F。\n\n小憩一下，恢复精力，整装待发！很多同学可能很好奇了，为什么还只能拿一个银牌呢？那是因为我们的重构进程才走了一半呀✌️，但是不要担心，我们所有新的东西都已经讲完了，接下来就只是一些收尾工作了，当你能坚持到终点的时候，会有惊喜等着你哦！加油吧骚年\U0001F4AA。"
      - file: src/components/PostForm/index.jsx
        display: true
        explain:
          pre: >-
            ### 开始重构 “首页” 之旅


            我们依然按照之前的套路，从最底层的组件开始重构，首先是我们的登录框弹出层 `LoginForm` 组件，让我们打开
            `src/components/PostForm/index.jsx` 文件，对其中的内容作出相应的修改如下：
          post: "这个文件的形式和我们之前的 `src/components/LoginForm/index.jsx` 文件类似，可以看到，我们上面的文件中主要有四处改动：\n\n- 首先我们将 `formTitle` 和 `formContent ` 等状态放置到 `PostForm` 组件内部，并使用 `useState` Hooks 管理起来，因为它们只和此组件有关系。\n- 接着，我们将 `Input ` 里面的 `props.formTitle` 替换成 `formTitle`，将它的 `onInput ` 回调函数内部的设置改变状态的 `props. handleTitleInput` 替换成 `setFormTitle(e.target.value)` 的回调函数。\n- 接着，我们将 `Textarea ` 组件的 `props. formContent ` 替换成 `formContent `，将之前 `onInput` 接收的回调函数换成了 `setFormContent ` 的形式来设置 `formContent` 的变化。\n- 最后，我们将之前提交表单需要调用的父组件方法 `props.handleSubmit` 移动到组件内部来定义，可以看到，这个 `hanldeSubmit` 和我们之前定义在 `src/pages/index/index.js` 组件里的 `handleSubmit` 逻辑类似：\n  -  首先使用 `e.preventDefault` 禁止浏览器默认行为。\n  - 接着进行数据验证，不合要求的数据就会被驳回并显示警告（这里我们又显示对了\U0001F605）。\n  - 接着 dispatch 一个 `type` 为 `SET_POSTS` 的 action，将新发表的 post 添加到 Redux store 对应的 `posts` 数组中。我们注意到这里我们使用 `useSelector` Hooks 从 Redux store 里面获取了 `nickName` 和 `avatar` 属性，并把它们组合到 `post.user` 属性里，随着 action 的 payload 一起被 dispatch，我们用这个 `user` 属性标志发帖的用户属性。\n  - 清空表单状态。\n  - 接着我们 dispatch 一个 `type` 为 `SET_POST_FORM_IS_OPENED ` 的 action 用来更新 `isOpened` 属性，它将关闭展示发表帖子的表单弹出层 `FloatLayout` 组件。\n  - 最后提示发帖成功。\n"
      - file: src/components/PostCard/index.jsx
        display: true
        explain:
          pre: >-
            接着是我们 “首页” 页面组件另外一个底层子组件 `PostCard`，它主要用于展示一个帖子，让我们
            `src/components/PostCard/index.jsx` 文件，对其中的内容作出对应的修改如下：
          post: "可以看到这个组件基本不保有自己的状态，它接收来自父组件的状态，我们对它的修改主要有下面五个部分：\n\n- 将之前的直接获取 `props.title` 和 `props.content` 放到了 `props.post` 属性中，我们从 `props.post` 属性中导出我们需要展示的 `title` 和 `content`，还要一个额外的 `user` 属性，它应该是一个对象，保存着发帖人的用户属性，我们使用解构的方法获取 `user.avatar` 和 `user.nickName` 的值。\n- 接着我们看到 `return` 的组件结构发生了很大的变化，这里我们为了方便，使用了 `taro-ui` 提供给我们的 `Article` 文章样式组件，用于展示类似微信公众号文章页的一些样式，可供用户快速\b呈现文章内容，可以详情可以查看 [taro-ui 链接](https://taro-ui.jd.com/#/docs/article)，有了 `taro-ui` 加持，我们就额外的展示了发表此文章的用户头像（`avatar`）和昵称（`nickName`）。\n- 我们还可以看到，这里我们对原 `content` 做了一点修改，当 `PostCard` 组件在文章列表中被引用的时候，我们对内容长度进行截断，当超过 66 字符时，我们就截断它，并加上省略号 `...`。\n- 最后，我们改动了 `handleClick` 方法，之前是在跳转路由的页面路径里直接带上查询参数 `title` 和 `content` ，当我们要传递的内容多了，这个路径就会显得很臃肿，所以这里我们传递此文章对应的 `id`，这样可以通过此 `id` 取到完整的 `post` 数据，使路径保持简洁，这也是最佳实践的推荐做法。"
      - file: src/components/PostCard/index.scss
        display: true
        explain:
          pre: >-
            接着我们补充一下在 `PostCard` 组件里面会用到的样式，打开
            `src/components/PostCard/index.scss` 文件，补充和改进对应的样式如下：
          post: 可以看到我们更新了一些样式，然后引入了 `taro-ui` 提供给我们的 `article` 文章样式。
      - file: src/app.scss
        display: false
        explain:
          pre: ''
      - file: src/pages/index/index.jsx
        display: true
        explain:
          pre: >-
            重构完 “首页” 页面组件的所有底层组件，我们开始完成最终的顶层组件，打开 `src/pages/index/index.jsx`
            文件，对相应的内容修改如下：
          post: >-
            可以看到我们上面的内容有以下五处改动：


            - 首先我们导出了 `useSelector` 钩子，然后从 Redux store 中获取了 `posts` 、`isOpened`
            和 `nickName` 等属性。

            - 接着，我们将之前定义在 `PostCard` 组件上的属性进行了一次换血，之前是直接传递 `title` 和 `content`
            属性，现在我们传递整个 `post` 属性，并且额外传递了一个 `postId` 属性，用于在 `PostCard`
            里面点击跳转路由时进行标注。

            - 接着，我们去掉 `PostForm` 组件上面的所有属性，因为我们已经在组件内部定义了它们。

            - 接着，我们使用 `useEffect` Hooks，在里面定义并调用了 `getStorage` 方法，获取了我们保存在
            `storage` 里面的用户登录信息，如果用户登录了，我们 dispatch 一个 `type` 为 `SET_LOGIN_INFO`
            的 action，将这份登录信息保存在 Redux store 里面以供后续使用。

            - 最后，我们将 `AtFab` 的 `onClick` 回调函数替换成
            `handleClickEdit`，在其中对用户点击进行判断，如果用户未登录，那么弹出警告，告知用户，如果用户已经登录，那么就
            dispatch 一个 `type` 为 `SET_POST_FORM_IS_OPENED` 的 action 去设置
            `isOpened` 属性，打开发帖的弹出层，允许用户进行发帖操作。
      - file: src/pages/post/post.jsx
        display: true
        explain:
          pre: "### 以重构 “文章详情” 页结束\n\n最后，让我们坚持一下，跑赢重构工作的最后一公里\U0001F4AA！完成 “文章详情” 页的重构。\n\n让我们打开 `src/pages/post/post.jsx` 文件，对其中的内容作出相应的修改如下："
          post: "可以看到，上面的文件做了以下四处修改：\n\n- 我们从 `router.params` 中导出了 `postId`，因为之前我们在 `PostCard` 里面点击跳转的路径参数使用了 `postId`。\n- 接着我们导入并使用 `useSelector` Hooks 获取了保存在 Redux store 中的 `posts` 属性，然后使用上一步获取到的 `postId`，来获取我们最终要渲染的 `post` 属性。\n- 最后，我们将传给 `PostCard` 的属性改成上一步获取到的 `post` 。\n\n\n::: warning\n**注意**\n\n这里的 `console.log` 是调试时使用的，生产环境中建议删掉。\n:::\n\n### 查看效果\n\n可以看到，在未登录状态下，会提示请登录：\n\n![](tuture-assets/taro-demo-notlogin.gif)\n\n在已登录的情况下，发帖子会显示当前登录用户的头像和昵称：\n\n![](tuture-assets/taro-demo5.gif)\n\n### 小结\n\n有幸！到这里，我们 Redux 重构之旅的万里长征就跑完了！让我们来回顾一下我们在这一小节中学到了那些东西。\n\n- 首先我们讲解了使用 Redux 的初衷，接着我们安装了相关依赖，然后引出了 Redux 三大核心概念：Store、Action、Reducers，接着我们创建了应用需要的两个 Reducer：`post` 和 `user`；接着我们将将 Redux 和 React 整合起来；因为 Action 是从组件中 dispatch 出来了，所以我们接下来就开始了组件的重构之旅。\n\n- 在重构 “我的” 页面组件时，我们按照 Redux 的思想，从它的底层组件三个登录按钮重构开始，接着重构了 `LoggedMine` 组件，再往上就是 `Header` 组件；重构完 `Header` 组件之后，我们接着从 `Footer` 组件的底层组件 `Logout` 组件开始重构，然后重构了 `LoginForm` 组件，最后是 `Footer` 组件，重构完 `Header` 和 `Footer` 组件，我们开始重构其上层组件 `mine` 页面组件，自此我们就完成了 “我的” 页面的重构。\n\n- 在重构 “首页” 页面组件时，我们同样按照 Redux 的思想，从它的底层组件 `PostForm` 组件开始，接着是 `PostCard` 组件，最后再回到顶层组件 `index` 首页页面组件。\n\n在重构 “帖子详情” 页面组件时，因为其底层组件 `PostCard` 已经重构过了，所以我们就直接重构了 `post` 帖子详情页面组件。\n\n能跟着这么长的文章坚持到这里，我想给你鼓个掌，也希望你能给自己鼓个掌，我想，我可以非常肯定且自豪的颁布给你第一名的奖章了\U0001F947。\n"
      - file: yarn.lock
    explain:
      pre: >-
        欢迎继续阅读《Taro 小程序开发大型实战》系列，前情回顾：


        - [熟悉的 React，熟悉的 Hooks](https://tuture.co/2019/12/25/34a473b/)：我们用 React
        和 Hooks 实现了一个非常简单的添加帖子的原型

        - [多页面跳转和 Taro UI 组件库](https://tuture.co/2019/12/25/af69225/)：我们用 Taro
        自带的路由功能实现了多页面跳转，并用 Taro UI 组件库升级了应用界面

        -
        [实现微信和支付宝多端登录](https://tuture.co/2019/12/25/5e10118/)：实现了微信、支付宝以及普通登录和退出登录


        如果你跟着敲到了这里，你一定会发现现在的状态管理和数据流越来越臃肿，组件状态的更新非常复杂。在这一篇中，我们将开始用 Redux 重构。


        如果你不熟悉 Redux，推荐阅读我们的《Redux 包教包会》系列教程：


        - [Redux 包教包会（一）：解救 React 状态危机](https://tuture.co/2019/11/28/1fe175a/)

        - [Redux 包教包会（二）：趁热打铁，完全重构](https://tuture.co/2019/11/28/d129c56/)

        - [Redux 包教包会（三）：各司其职，重拾初心](https://tuture.co/2019/11/28/a3b94eb/)


        如果你希望直接从这一步开始，请运行以下命令：


        ```bash

        git clone -b redux-start https://github.com/tuture-dev/ultra-club.git

        cd ultra-club

        ```


        ::: info

        **提示**


        这一篇的内容很长，要敲的代码很多，建议先收藏，在有空的时候抽出一大块时间去实践哦。相信经过这一篇的洗礼，不仅能对 Redux
        的理解更上一层楼，Taro 的开发功力也能大增！

        :::


        写到这一步，我们发现状态已经有点多了，而且 `src/pages/mine/mine.jsx` 文件是众多状态的顶层组件，比如我们的普通登录按钮
        `src/components/LoginButton/index.jsx` 组件和我们的
        `src/components/Footer/index.jsx` 组件，我们通过点击普通登录按钮打开登录弹窗的状态 `isOpened`
        需要在 `LoginButton` 里面进行操作，然后进而影响到 `Footer` 组件内的 `FloatLayout`
        弹窗组件，像这种涉及到多个子组件进行通信，我们将状态保存到公共父组件中的方式在 React 中叫做 ”状态提升“。


        但是随着状态增多，状态提升的状态也随着增多，导致保存这些状态的父组件会臃肿不堪，而且每次状态的改变需要影响很多中间组件，带来极大的性能开销，这种状态管理的难题我们一般交给专门的状态管理容器
        Redux 来做，而让 React  专注于渲染用户界面。


        Redux 不仅可以保证状态的可预测性，还能保证状态的变化只和对应的组件相关，不影响到无关的组件，关于 Redux
        的详细剖析的实战教程可以参考图雀社区的：[Redux
        包教包会系列文章](https://tuture.co/2019/11/28/1fe175a/)。


        在这一节中，我们将结合 React Hooks 和 Redux 来重构我们状态管理。
      post: 终于，这漫长的第四篇结束了。在接下来的文章中，我们将接触小程序云后台开发，并在前端接入后台数据。
  - name: 微信小程序云初尝鲜
    commit: b32362b
    diff:
      - file: package.json
        display: true
        explain:
          pre: >-
            ### Redux 异步工作流解析


            我们来看一下 Redux 的数据流动图：


            ![](tuture-assets/redux-saga-1.jpg)


            上图中灰色的那条路径是我们之前一直在使用的 Redux 的数据流动图，它是 Redux 同步数据流动图：


            - `view` 中 `dispatch(syncAction)` 一个同步 action 来更新 `store` 中的数据

            - `reducer` 响应 action，更新 `store` 状态

            - `connect` 将更新后的状态传给 `view`

            - `view` 接收新的数据重新渲染



            ::: info

            **注意**


            对 Redux 还不了解的同学可以学习一下图雀社区的 [Redux
            包教包会系列教程](https://tuture.co/2019/11/28/1fe175a/)哦。

            :::


            现在我们要去向小程序云发起请求，这个请求是一个异步的请求，它不会立刻得到响应，所以我们需要一个中间状态（这里我们使用
            `Saga`）来回处理这个异步请求并得到数据，然后再执行和之前同步请求类似的路径，即为我们上图中绿色的部分+剩下灰色的部分，所以异步工作流程就变成了这样：


            - `view` 中 `dispatch(asyncAction)` 一个异步 action 来获取后端（这里是小程序云）的数据

            - `saga` 处理这个异步 action，并等待数据响应

            - `saga` 得到响应的数据，`dispatch(syncAction)` 一个同步的 action 来更新 store 的状态

            - `reducer` 响应 action，更新 `store` 状态

            - `connect` 将更新后的状态传给 `view`

            - `view` 接收新的数据重新渲染


            ::: info

            **注意**


            图雀社区日后会出一篇教程专门讲解 Redux
            异步工作流，这里不会细究整个异步流程的原理，只会讲解如何整合这个异步工作流。敬请期待哦✌️~

            :::


            ### 实战 Redux 异步工作流


            #### 安装


            我们使用 `redux-saga` 这个中间件来接管 Redux 异步工作流的处理异步请求部分，首先在项目根目录下安装
            `redux-saga` 包：


            ```Bash

            $ npm install redux-saga

            ```
          post: >

            ::: primary

            `redux-saga` 是 `redux` 的一个处理异步流程的中间件，那么 Saga
            是什么？Saga的定义是“长时间活动的事务”(Long Lived
            Transaction，后文简称为LLT)。他是普林斯顿大学HECTOR
            GARCIA-MOLINA教授在1987年的一篇关于分布式数据库的论文中提出来的概念。


            官方把一个 saga 比喻为应用程序中的一个单独的线程，它负责独立的处理副作用，在 JavaScript
            中，副作用就是指异步网络请求、本地读取 localStorage/Cookie 等外界操作。

            :::
      - file: src/store/index.js
        display: true
        explain:
          pre: >-
            #### 配置 `redux-saga` 中间件


            安装完之后，我们接着要先配置 `redux-saga` 才能使用它，打开 `src/store/index.js`
            文件，对其中的内容作出对应的修改如下：
          post: >-
            可以看到，我们上面的文件作出以下四处改动：


            - 首先我们导出了 `createSagaMiddleware`

            - 接着我们从 `src/store/sagas` 文件夹下导出了一个 `rootSaga`，它组合了所有的 `saga`
            文件，这类似组合 `reducer` 的 `combineReducers`，我们将在后续的步骤中编写这些 `sagas`。

            - 接着我们调用 `createSagaMiddleware` 生成 `sagaMiddleware` 中间件，并将其放置在
            `middleware` 数组中，这样 Redux 就会注册这个中间件，在响应异步 action 时，`sagaMiddleware`
            会介入，并将其转交给我们定义的 `saga` 函数来处理。

            - 最后在 `createStore` 函数里面，当创建 `store` 之后，我们调用
            `sagaMiddleware.run(rootSaga)` 来将所有的 `sagas` 跑起来开始监听并响应异步 action。
      - file: src/components/LoginForm/index.jsx
        display: true
        explain:
          pre: >-
            #### View 中发起异步请求


            配置使用 `redux-saga` 中间件，并将 `sagas` 跑起来之后，我们可以开始在 React 中 dispatch 异步的
            action 了。


            让我们遵照之前的重构顺序，先来搞定登录的异步数据流处理，打开 `src/components/LoginForm/index.jsx`
            文件，对其中的内容作出对应的修改如下：
          post: >-
            可以看到，我们对上面的代码做出了以下三处改动：


            - 我们将之前设置用户登录信息的 `SET_LOGIN_INFO` 和设置登录框弹出层的 `SET_IS_OPENED` 换成了
            `LOGIN`
            常量，代表我们要先向小程序云发起登录请求，然后获取到登录的数据再设置登录信息和关闭登录框弹出层（其实这里也可以直接关闭弹出层，有点失策(⊙o⊙)…）。

            - 接着我们将之前的设置登录信息和关闭登录框弹出层的操作删除掉。

            - 最后我们将 `dispatch` 一个 `action.type` 为 `LOGIN` 的
            action，带上我们的需要进行登录的信息 `userInfo`。


            #### 增加 Action 常量


            我们在上一步中使用到了 `LOGIN` 常量，打开 `src/constants/user.js`，在其中增加 `LOGIN` 常量：


            ```JavaScript

            export const SET_IS_OPENED = 'MODIFY_IS_OPENED'

            export const SET_LOGIN_INFO = 'SET_LOGIN_INFO'

            export const LOGIN = 'LOGIN'

            ```
      - file: src/sagas/user.js
        display: true
        explain:
          pre: >-
            #### Saga 处理异步请求


            Saga 在处理异步请求时有很多种方式，因项目不同，可以采用不同的方式，这里我们选用了官方推荐的最佳实践：


            - watcherSaga 监听异步的 action

            - handlerSaga 处理异步的 action
              - `dispatch` 同步的 action，更新异步 action 开始的状态
              - `dispatch` 同步的 action，更新异步 action 成功/失败的状态

            运用最近实践之后，之前的 Redux 数据流动图就变成了下面这样子：


            ![](tuture-assets/redux-saga-2.jpg)


            好了，讲解了 `redux-saga` 处理异步 Action 的最佳实践之后，我们马上来运用最佳实践来编写处理异步 Action 的
            Saga 文件。


            在我们的应用中可能涉及到多个异步请求，所以 `redux-saga` 推荐的最佳实践是单独创建一个 `sagas`
            文件夹，来存放所有处理异步请求的 `sagas` 文件，以及可能用到的辅助文件。


            在上一步中，我们从 view 中发出了 `LOGIN` 异步登录请求，接下来我们要编写对应处理这个 `LOGIN` 请求的 `saga`
            文件，在 `src` 文件夹下创建 `sagas` 文件夹，并在其中创建 `user.js`，在其中编写如下内容：
          post: "可以看到，上面的改动主要是创建 `watcherSaga` 和 `handlerSaga` 。\n\n**创建 `watcherSaga`**\n\n- 我们创建了登录的 `watcherSaga`： `watchLogin`，它用来监听 `action.type` 为 `LOGIN` 的 action，并且当监听到 `LOGIN` action 之后，从这个 action 中获取必要的 `userInfo` 数组，然后激活 `handlerSaga`：`login` 去处理对应的登录逻辑。\n- 这里的 `watcherSaga`：`watchLogin` 是一个生成器函数，它内部是一个 `while` 无限循环，表示在内部持续监听 `LOGIN` action。\n- 在循环内部，我们使用了 `redux-saga` 提供的 `effects helper` 函数：`take`，它用于监听 `LOGIN` action，获取 action 中携带的数据。\n- 接着我们使用了另外一个 `effects helper` 函数：`fork`，它表示非阻塞的执行 `handlerSaga`：`login`，并将 `payload.userInfo` 作为参数传给 `login`。\n\n**创建 `handlerSaga`**\n\n- 我们创建了登录的 `handlerSaga`：`login`，它用来处理登录逻辑。\n- `login` 也是一个生成器函数，在它内部是一个 `try/catch` 语句，用于处理登录请求可能存在的错误情况。\n- 在 `try` 语句中，首先是使用了 `redux-saga` 提供给我们的 `effects helper` 函数：`call` 来调用登录的 API：`userApi.login`，并把 `userInfo` 作为参数传给这个 API。\n  - 接着如果登录成功，我们将登录成功的 `user` 缓存到 `storage` 里面。\n  - 接着，我们使用 `redux-saga` 提供的 `effects helpers` 函数：`put`，`put` 类似之前在 `view` 中的 `dispatch` 操作，，来 `dispatch` 了三个 action：`LOGIN_SUCCESS`，`SET_IS_OPENED`，`SET_LOGIN_INFO`，代表更新登录成功的状态，关闭登录框，设置登录信息到 Redux Store 中。\n  - 最后我们使用了 Taro UI 提供给我们的消息框，来显示一个 `success` 消息。\n- 如果登录失败，我们则使用 `put` 发起一个 `LOGIN_ERROR` 的 action 来更新登录失败的信息到 Redux Store，接着使用了 Taro UI 提供给我们的消息框，来显示一个 `error` 消息。\n\n::: info\n**注意**\n\n对生成器函数不了解的同学可以看一下这篇文档：[迭代器和生成器](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_generators)。\n:::\n\n**一些额外的工作**\n\n为了创建 `watcherSaga` 和 `handlerSaga`，我们还导入了 `userApi`，我们将在后面来创建这个 API。\n\n除此之外我们还导入了需要使用的 action 常量：\n\n- `SET_LOGIN_INFO`：设置登录信息\n- `LOGIN_SUCCESS`：更新登录成功信息\n- `LOGIN`：监听登录动作\n- `LOGIN_ERROR`：更新登录失败信息\n- `SET_IS_OPENED`：设置登录框开启/关闭的信息\n\n我们还从 `redux-saga/effects` 包中导入了必要的函数：\n\n- `call`：在 `saga` 函数中调用其他异步/同步函数，获取结果\n- \_`put`：类似 `dispatch`，用于在 `saga` 函数中发起 action\n- `take`：在 `saga` 函数中监听 action，并获取对应 action 所携带的数据\n- `fork`：在 `saga` 函数中无阻塞的调用 `handlerSaga`，即调用之后，不会阻塞后续的执行逻辑。\n\n最后，我们导出了 `watchLogin`。\n\n#### 创建 `saga` 中心调度文件\n\n我们在上一步中导出了 `watchLogin`，它类似 `reducers` 里面的单个 `reducer` 函数，我们还需要有类似 `combineReducers` 组合 `reducer` 一样来组合所以的 `watcherSaga`。\n\n在 `src/sagas` 文件夹下创建 `index.js` 文件，并在其中编写如下的内容：\n\n```JavaScript\n\nimport { fork, all } from 'redux-saga/effects'\n \nimport { watchLogin } from './user'\n \nexport default function* rootSaga() {\n  yield all([\n    fork(watchLogin)\n  ])\n}\n```\n\n可以看到，上面的文件主要有三处改动：\n\n- 我们从 `redux-saga/effects` 导出了 `effects helper` 函数 `fork` 和 `all`。\n- 接着我们从 `user.js` saga 中导入了 `watchLogin` 。\n- 最后我们导出了一个  `rootSaga`，它是调度所有 sagas 函数的中心，通过在 `all` 函数中传入一个数组，并且 `fork` 非阻塞的执行 `watchLogin`，进而开始监听和分发异步的 Action，一旦监听到 `LOGIN` action，则激活 `watchLogin` 里面的处理逻辑。\n\n\n::: info\n**注意**\n\n目前 `all` 函数接收的数组还只有 `fork(watchLogin)`，等到后续加入 `post` 的异步逻辑时，还会给数组增加多个 `fork(watcherSaga)`。\n:::\n\n"
      - file: src/constants/user.js
        display: true
        explain:
          pre: >-
            #### 添加 action 常量


            因为在上一步的 `user` saga 文件中，我们使用到了一些还未定义的常量，所以接下来我们马上来定义它们，打开
            `src/constants/user.js`，在其中添加对应的常量如下：
          post: >-
            可以看到，上面除了我们在  "saga 处理异步请求" 中使用到的常量之外，还多了一个 `LOGIN_NORMAL`
            常量，它主要是用于设置登录状态的默认状态的常量。
      - file: src/api/user.js
        display: true
        explain:
          pre: >-
            #### 实现请求 login API


            在之前的 `user` saga 文件里面，我们使用到了
            `userApi`，它里面封装了用于向后端（这里我们是小程序云）发起请求的逻辑，让我们马上来实现它吧。


            我们统一将所有的 API 文件放到 `api` 文件夹里面，这便于我们日后的代码维护工作，在 `src` 文件夹下创建 `api`
            文件夹，在其中添加 `user.js` 文件，并在文件中编写内容如下：
          post: >
            在上面的代码中，我们定义了 `login` 函数，它是一个 `async` 函数，用来处理异步逻辑，在 `login`
            函数中，我们对当前的环境进行了判断，且只在微信小程序，即 `isWeapp` 的条件下执行登录的操作，对于支付宝小程序和
            H5，我们则放在下一节使用 LeanCloud 的 Serverless 来解决。


            登录逻辑是一个 `try/catch` 语句，用于捕捉可能存在的请求错误，在 `try` 代码块中，我们使用了 `Taro`
            为我们提供的微信小程序云的云函数 API `Taro.cloud.callFunction`
            来便捷的向小程序云发起云函数调用请求，它的调用体是一个类似下面结构的对象：


            ```JavaScript

            {
              name: '', // 需要调用的云函数名
              data: {} // 需要传递给云函数的数据
            }

            ```


            这里我们调用了一个 `login` 云函数，并将 `userInfo`
            作为参数传给云函数，用于在云函数中使用用户信息来注册用户并保存到数据库，我们将在下一节中实现这个云函数。



            ::: info

            **提示**


            想了解更多关于微信小程序云函数的内容，可以查阅微信小程序云函数文档：[文档地址](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/capabilities.html#%E4%BA%91%E5%87%BD%E6%95%B0)

            :::



            如果调用成功，我们可以接收返回值，用于从后端返回数据，这里我们使用解构的方法，从返回体里面拿到了 `result` 对象，然后取出其中的
            `user` 对象并作为 `login` API 函数的返回值。


            如果调用失败，则打印错误。


            最后我们定义了一个 `userApi` 对象，用于存放所有和用户逻辑有个的函数，并添加 `login` API 属性然后将其导出，这样在
            `user` saga 函数里面就可以导入 `userApi` 然后通过 `userApi.login` 的方式来调用 `login`
            API 处理登录逻辑了。


            #### 创建 API 默认导出文件


            我们创建了 `src/api/user.js` 文件，我们需要建立一个统一的导出所有 API 文件的默认文件，方便统一分发所有的
            API，在 `src/api` 文件夹下建立 `index.js` 文件，并在其中编写如下内容：


            ```JavaScript


            import userApi from './user'

            export { userApi }

            ```


            可以看到，我们从 `user.js` 里面默认导出了 `userApi`，并将其加为 `export` 导出的对象的属性。
      - file: project.config.json
        display: true
        explain:
          pre: >-
            #### 配置云函数开发环境


            我们在上一小节中使用 Taro 为我们提供的云函数 API 调用了一个 `login` 云函数，现在我们马上来实现这个云函数。


            微信小程序文档中要求我们在项目根目录下面建立一个一个存储云函数的文件夹，然后在 `project.config.json` 的
            `cloudfunctionRoot`
            字段的值指定为这个目录，这样小程序开发者工具就可以识别此目录为存放云函数的目录，并做特殊的标志处理。


            我们在项目根目录下创建了一个 `functions` 文件夹，它与 `src` 文件夹是同级的：


            ```bash

            .

            ├── LICENSE

            ├── README.md

            ├── config

            ├── dist

            ├── functions

            ├── node_modules

            ├── package.json

            ├── project.config.json

            ├── src

            ├── tuture-assets

            ├── tuture-build

            ├── tuture.yml

            └── yarn.lock

            ```


            接着我们在根目录的 `project.config.json` 文件中添加 `cloudfunctionRoot` 字段，并将其设置为
            `'functions/'` 如下：
          post: >+
            可以看到，当我们创建了上面的文件夹并设置了 `project.config.json` 之后，我们的小程序开发者工具会变成下面这个样子：


            ![](tuture-assets/image-8c48ba740582f334.png)


            我们创建的那个 `functions` 文件夹多了一个额外的云图标，并且文件夹的命名从 `functions` 变成了
            `functions | ultra-club`，竖杠右边的是我们当前的小程序环境。


            并且当我们在小程序开发者工具里面右键点击这个 `functions` 文件夹时，会出现菜单弹框，允许我们进行云函数相关的操作：


            ![](tuture-assets/image-4fbfead43855d6a8.png)


            我们可以看到有很多操作，这里我们主要会用到如下几个操作：


            - 新建 Node.js 云函数

            - 开启云函数本地调试



            ::: info

            **注意**


            其它的操作等你走完整个小程序云开发的流程之后，当需要编写更加复杂的业务逻辑时都会遇到，具体可以参考小程序云的文档：[文档地址](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions.html)。

            :::



            ::: info

            **注意**


            必须先开通小程序云开发环境才能使用云函数。具体步骤可以参考我们在 “开通小程序云” 这一节中的讲解。

            :::


      - file: functions/login/package.json
        display: true
        explain:
          pre: >-
            #### 创建 login 云函数


            讲解了微信小程序云函数的配置，终于到了创建云函数的阶段了，我们在小程序开发者工具中右键点击 `functions` 文件夹，然后选择新建
            Node.js 云函数，输入 `login`，然后回车创建，会看到小程序开发者工具自动帮我们创建了如下的代码文件：


            ![](tuture-assets/image-5cd0ff3734c50321.png)


            可以看到，一个云函数是一个独立的 Node.js 模块，它处理一类逻辑。


            我们先来看一下 `package.json` 文件如下：
          post: >-
            可以看到，在添加云函数时，小程序开发者工具默认为我们添加了一项 `wx-server-sdk` 依赖，我们在云函数中需要用到它内置的相关
            API 来操作小程序云。


            为了使这个 Node.js 云函数/项目跑起来，我们需要安装依赖，进入 `functions/login` 目录，在目录下运行 `npm
            install` 命令来安装依赖。
      - file: functions/login/index.js
        display: true
        explain:
          pre: >-
            #### 了解默认生成的云函数


            当创建了云函数，并安装了依赖之后，我们马上来揭开云函数的神秘面纱，打开
            `functions/login/index.js`，可以看到如下代码：


            ```JavaScript

            // 云函数入口文件

            const cloud = require('wx-server-sdk')


            cloud.init()


            // 云函数入口函数

            exports.main = async (event, context) => {
              const wxContext = cloud.getWXContext()

              return {
                event,
                openid: wxContext.OPENID,
                appid: wxContext.APPID,
                unionid: wxContext.UNIONID,
              }
            }

            ```


            可以看到，默认生成的代码主要做了下面几项工作：


            - 导入 `wx-server-sdk` 包，并命名为 `cloud`，所有我们需要操作小程序云的方法都绑定在 `cloud` 对象上。

            - 接着调用 `cloud.init()` 来初始化云函数的云开发环境，我们将在后续实现 `login` 逻辑时设置环境。

            - 最后是云函数的入口函数，它默认以 `main` 函数作为导出函数，是一个 `async`
            函数，我们可以在函数内部以同步的方式处理异步逻辑，可以看到，这个函数接收两个参数：`event` 和 `context`，`event`
            指的是触发云函数的事件，当小程序端调用云函数时，event 就是小程序端调用云函数时传入的参数，外加后端自动注入的小程序用户的
            `openid` 和小程序的 `appid`。`context`
            对象包含了此处调用的调用信息和运行状态，可以用它来了解服务运行的情况。默认生成的函数内部代码主要是获取了此时微信上下文信息，然后与
            `event` 对象一同返回，这样当我们在小程序端以 `Taro.cloud.callFunction`
            调用这个函数获得的返回值就是包含微信上下文信息和 `event` 的对象。


            #### 编写 login 云函数


            了解了云函数的具体逻辑，我们马上在云函数中来实现我们具体的登录逻辑，打开
            `functions/login/index.js`，对其中的代码做出对应的修改如下：
          post: >
            可以看到上面的代码改动主要有以下六处：


            - 首先我们给 `cloud.init()` 传入了环境参数，我们使用了内置的
            `cloud.DYNAMIC_CURRENT_ENV`，表示自动设置为当前的云环境，即在右键点击小程序开发者工具里
            `functions` 文件夹时选择的环境。

            - 接着，我们通过 `cloud.database()` 生成了数据实例 `db`，用于之后在函数体中便捷的操作云数据库。

            - 接着就是 `main` 函数体，我们首先从 `event` 对象中取到了在小程序的调用
            `Taro.cloud.callFunction` 传过来的 `userInfo` 数据。

            - 然后，跟着取数据的是一个 `try/catch` 语句块，用于捕获错误，在 `try` 语句块中，我们使用 `db`
            的查询操作：`db.collection('user').where().get()`，表示查询 `where` 条件的 `user`
            表数据，它查出来应该是个数组，如果不存在满足 `where` 条件的，那么是一个空数组，如果存在满足 `where`
            条件的，那么返回一个 `user` 数组。

            - 接着，我们判断是否查询出来的用户数组为空，如果为空表示用户还未注册过，则创建一个新用户，如果不为空，那么返回查询到的第一个元素。

            - 这里我们使用的 `db.collection('user').add()`，用于添加一个 `user` 数据，然后在 `add`
            方法中传入 `data` 字段，表示设置此用户的初始值，这里我们额外使用了 `db.serverDate()`
            用于记录创建此用户的时间和更新此用户的时间，方便之后做条件查询；因为向数据库添加一个记录之后只会返回此记录的
            `_id`，所以我们需要一个额外的操作 `db.collection('user').doc()` 来获取此条记录，这个 `doc`
            用于获取指定的记录引用，返回的是这条数据，而不是一个数组。



            ::: info

            **注意**


            这里关于云数据库的相关操作，可以查阅微信小程序云文档，在文档里提供了详尽的实例：[数据库文档](https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database.html#%E6%95%B0%E6%8D%AE%E5%BA%93)。

            :::
      - file: src/reducers/user.js
        display: true
        explain:
          pre: >-
            #### 适配异步 action 的 reducer


            我们在前面处理登录时，在组件内部 `dispatch` 了 `LOGIN` action，在处理异步 action 的 saga
            函数中，使用 `put` 发起了一系列更新 store 中登录状态的 action，现在我们马上来实现响应这些 action 的
            `reducers`，打开 `src/reducers/user.js`，对其中的代码做出对应的修改如下：
          post: |-
            看一看到上面的代码主要有三处改动：

            - 首先我们导入了必要的 action 常量
            - 接着我们给 `INITIAL_STATE` 增加了几个字段：
              - `userId`：用于之后获取用户数据，以及标志用户的登录状态
              - `isLogin`：用于标志登录过程中是否在执行登录逻辑，`true` 表示正在执行登录中，`false` 表示登录逻辑执行完毕
              - `loginStatus`：用于标志登录过程中的状态：开始登录（`LOGIN`）、登录成功（`LOGIN_SUCCESS`）、登录失败（`LOGIN_ERROR`）
            - 最后就是 `switch` 语句中响应 action，更新相应的状态。
      - file: src/components/WeappLoginButton/index.js
        display: true
        explain:
          pre: >-
            ### 收尾 User 剩下的异步逻辑


            #### 微信登录


            我们在上一节 “实现 Redux 异步逻辑” 中，着重实现了普通登录按钮的异步逻辑，现在我们来收尾一下使用微信登录的逻辑。打开
            `src/components/WeappLoginButton/index.js` 文件，对其中的内容作出对应的修改如下：
          post: >-
            可以看到，上面的代码主要有一下三处改动：


            - 我们删掉了之前直接设置登录信息的 `SET_LOGIN_INFO` 常量，取而代之的是 `LOGIN` 常量。

            - 接着我们删掉了直接设置 `storage` 缓存的代码逻辑

            - 最后，我们将之前发起 `SET_LOGIN_INFO` action 的逻辑改为了发起 `LOGIN` 异步
            action，来处理登录，并且组装了 `userInfo` 对象作为 `payload` 对象的属性。


            因为我们在上一节 “实现 Redux 异步逻辑” 中已经处理了 `LOGIN` 的整个异步数据流逻辑，所以这里只需要
            `dispatch` 对应的 `LOGIN` action 就可以处理微信登录的异步逻辑了。
      - file: src/pages/mine/mine.jsx
        display: true
        explain:
          pre: >-
            #### 优化 `user` 逻辑顶层组件


            最后，我们来收尾一下 `user` 逻辑的顶层组件，`mine` 页面，打开
            `src/pages/mine/mine.jsx`，对其中的内容作出对应的修改如下：
          post: >-
            可以看到，我们对上面的代码做出了三处修改如下：


            - 首先我们导出了 `useSelector` Hooks，从 Redux Store 里获取到了 `nickName`。

            - 接着，因为我们在 “实现 Redux 异步逻辑” 一节中，保存了 `userId` 到 Redux Store 的 `user`
            逻辑部分，所以这里我们从 `storage` 获取到了 `_id`，然后给之前的 `SET_LOGIN_INFO` 的
            `payload` 带上了 `userId` 属性。

            - 最后，我们判断一下 `getStorage` 的逻辑，只有当此时 Redux Store 里面没有数据时，我们才去获取
            storage 里面的数据来更新 Redux Store。
      - file: src/components/Logout/index.js
        display: true
        explain:
          pre: >-
            #### 扩充 Logout 的清空数据范围


            因为在 Redux Store 里面的 `user` 属性中多出了一个 `userId` 属性，所以我们在  `Logout` 组件里
            `dispatch` action 时，要清空 `userId` 如下：
          post: >-
            ### 小结


            大功告成！到这里我们就把  `user`
            逻辑接入了小程序云，并能成功实现微信小程序端的小程序云登录，让我们马上来尝试一下预览本地调试时的效果预览图：


            ![](tuture-assets/result-11ec1de85de0d7bc.gif)


            可以看到，我们在本地调试云函数，以及小程序端接入云函数的步骤如下：


            - 我们首先右键点击 `functions` 文件夹，开启了 “云函数本地调试”。

            - 接着选中我们的 `login` 云函数，然后点击开启本地调试，这样我们就可以在本地调试云函数了。

            - 接着我们在小程序端点击微信登录，然后我们会看到小程序开发者工具控制台和云函数调试控制台都会答应此时云函数的运行情况。

            - 最后，我们登陆成功，成功在小程序端显示了登录的昵称和头像，并且检查云开发 > 数据库 > user 表，它确实增加了一个对应的
            `user` 记录，说明我们成功接通了小程序端和小程序云。


            一般在本地调试完后，我们就可以将云函数上传到云端，这样，我们就可以不用开启本地调试才能使用云函数了，这对于发布上线的小程序是必须的，具体上传云函数可以在小程序开发者工具中右键点击
            `functions` 文件夹下对应的云函数，然后选择 “上传并部署：云端安装所以依赖”：


            ![](tuture-assets/image-b2d6955488ad2756.png)


            在这篇教程中，我们实现了 User 逻辑的异步流程，在下一篇教程中，我们将实现 Post 逻辑的异步流程，敬请期待！
      - file: src/components/PostForm/index.jsx
        display: true
        explain:
          pre: "## “六脉神剑” 搞定 createPost 异步逻辑\n\n在上一篇文章中，我们将我们两大逻辑之一 User 部分接入了 Redux 异步处理流程，接着接入了微信小程序云，使得 User 逻辑可以在云端永久保存，好不自在：），两兄弟一个得了好处，另外一个不能干瞪眼对吧？在这一篇教程中，我们想办法把 User 另外一个兄弟 Post 捞上来，也把 Redux 异步流程和微信小程序给它整上，这样就齐活了\U0001F606\n\n我们首先来看一看最终的完成效果：\n\n![](tuture-assets/result7.gif)\n\n不知道看到这里的读者有没有发现上篇文章其实打造了一套讲解模式，即按照如下的 “六步流程” 来讲解，我们也称为 “六脉神剑” 讲解法：\n\n- 将组件中的同步逻辑重构到异步逻辑\n- 声明和补充对应需要的异步 `sagas` 文件\n- 定义 `sagas` 需要的常量文件\n- 定义 `sagas` 涉及到的前端 API 文件\n- 创建对于的微信小程序云函数，并编写对应的 Node.js 处理逻辑\n- 定义对应的 `reducers` 文件\n- 如此往复\n\n可以看到我们上面的讲解顺序实际上是按照前端数据流的流动来进行的，我们对标上面的讲解逻辑来看一下前端数据流是如何流动的：\n\n- 从组件中通过对应的常量发起异步请求\n- `sagas` 监听到对应的异步请求，开始处理流程\n- 在 `sagas` 调用对应的前端 API 文件向微信小程序云发起请求\n- 微信小程序云函数处理对应的 API 请求，返回数据\n- `sagas` 中获取到对应的数据，`dispatch` action 到对应的 `reducers` 处理逻辑\n- `reducers` 接收数据，开始更新本地 Redux Store 中的 `state`\n- 组件中重新渲染\n\n好的，了解了讲解逻辑和对应前端数据流动逻辑之后，我们马上来实践这套逻辑，把 User 逻辑的好兄弟 Post 逻辑搞定。\n\n### 第一剑：`PostForm` 组件中发起异步请求\n\n首先从创建帖子逻辑动刀子，我们将创建帖子接入异步逻辑并接通小程序云，让文章上云。打开 `src/components/PostForm/index.jsx` ，对其中的内容作出对应的修改如下：\n\n"
          post: >-
            可以看到，上面的内容做了如下四处修改：


            - 首先我们现在是接收用户的文章输入数据然后向小程序云发起创建文章的请求，所以我们将之前的 `dispatch` SET_POSTS
            Action 改为 CREATE_POST Action，并且将之前的 action payload 简化为 `postData` 和
            `userId`，因为我们可以通过小程序云数据库查询 `userId` 得到创建文章的用户信息，所以不需要再携带用户的数据。

            - 接着，因为我们不再需要用户的 `avatar` 和 `nickName` 数据，所以我们删掉了对应的 `useSelector`
            语句。

            - 接着，因为请求是异步的，所以需要等待请求完成之后再设置对应的发表文章的状态以及发表文章弹出层状态，所以我们删掉了对应的
            `dispatch` SET_POST_FORM_IS_OPENED Action 逻辑以及 ` Taro.atMessage` 逻辑。

            - 最后我们删掉不需要的常量 `SET_POSTS` 和 `SET_POST_FORM_IS_OPENED`，然后导入异步创建文章的常量
            `CREATE_POST`。


            #### 增加 Action 常量


            我们在上一步中使用到了 `CREATE_POST` 常量，打开 `src/constants/post.js`，在其中增加
            `CREATE_POST` 常量：


            ```JavaScript

            export const CREATE_POST = 'CREATE_POST'

            ```


            到这里，我们的 “六步流程” 讲解法就走完了第一步，即从组件中发起对应的异步请求，这里我们是发出的 `action.type` 为
            `CREATE_POST` 的异步请求。


            ### 第二剑： 声明和补充对应需要的异步 `sagas` 文件


            在 “第一剑” 中，我们从组件中 dispatch 了 action.type 为 `CREATE_POST` 的异步
            Action，接下来我们要做的就是在对应的 `sagas` 文件中补齐响应这个异步 action 的 sagas。


            在 `src/sagas/` 文件夹下面创建 `post.js` 文件，并在其中编写如下创建文章的逻辑：


            ```JavaScript

            import Taro from '@tarojs/taro'

            import { call, put, take, fork } from 'redux-saga/effects'


            import { postApi } from '../api'

            import {
              CREATE_POST,
              POST_SUCCESS,
              POST_ERROR,
              SET_POSTS,
              SET_POST_FORM_IS_OPENED,
            } from '../constants'


            function* createPost(postData, userId) {
              try {
                const post = yield call(postApi.createPost, postData, userId)

                // 其实以下三步可以合成一步，但是这里为了讲解清晰，将它们拆分成独立的单元

                // 发起发帖成功的 action
                yield put({ type: POST_SUCCESS })

                // 关闭发帖框弹出层
                yield put({ type: SET_POST_FORM_IS_OPENED, payload: { isOpened: false } })

                // 更新 Redux store 数据
                yield put({
                  type: SET_POSTS,
                  payload: {
                    posts: [post],
                  },
                })

                // 提示发帖成功
                Taro.atMessage({
                  message: '发表文章成功',
                  type: 'success',
                })
              } catch (err) {
                console.log('createPost ERR: ', err)

                // 发帖失败，发起失败的 action
                yield put({ type: POST_ERROR })

                // 提示发帖失败
                Taro.atMessage({
                  message: '发表文章失败',
                  type: 'error',
                })
              }
            }


            function* watchCreatePost() {
              while (true) {
                const { payload } = yield take(CREATE_POST)

                console.log('payload', payload)

                yield fork(createPost, payload.postData, payload.userId)
              }
            }


            export { watchCreatePost }

            ```


            可以看到，上面的改动主要是创建 `watcherSaga` 和 `handlerSaga` 。


            **创建 `watcherSaga`**


            - 我们创建了登录的 `watcherSaga`： `watchCreatePost `，它用来监听 `action.type` 为
            `CREATE_POST ` 的 action，并且当监听到 `CREATE_POST ` action 之后，从这个 action
            中获取必要的 `postData ` 和 `userId` 数据，然后激活 `handlerSaga`：`createPost `
            去处理对应的创建帖子的逻辑。

            - 这里的 `watcherSaga`：`watchCreatePost` 是一个生成器函数，它内部是一个 `while`
            无限循环，表示在内部持续监听 `CREATE_POST` action。

            - 在循环内部，我们使用了 `redux-saga` 提供的 `effects helper` 函数：`take`，它用于监听
            `CREATE_POST` action，获取 action 中携带的数据。

            - 接着我们使用了另外一个 `effects helper` 函数：`fork`，它表示非阻塞的执行
            `handlerSaga`：`createPost`，并将 `payload.postData` 和 `payload.userId`
            作为参数传给 `createPost`。


            **创建 `handlerSaga`**


            - 我们创建了创建帖子的 `handlerSaga`：`createPost`，它用来处理创建逻辑。

            - `createPost` 也是一个生成器函数，在它内部是一个 `try/catch` 语句，用于处理创建帖子请求可能存在的错误情况。

            - 在 `try` 语句中，首先是使用了 `redux-saga` 提供给我们的 `effects helper` 函数：`call`
            来调用登录的 API：`postApi.createPost`，并把 `postData` 和 `userId` 作为参数传给这个
            API。
              - 如果创建帖子成功，我们使用 `redux-saga` 提供的 `effects helpers` 函数：`put`，`put` 类似之前在 `view` 中的 `dispatch` 操作，，来 `dispatch` 了三个 action：`POST_SUCCESS `，`SET_POST_FORM_IS_OPENED `，`SET_POSTS `，代表更新创建帖子成功的状态，关闭发帖框，设置最新创建的帖子信息到 Redux Store 中。
              - 最后我们使用了 Taro UI 提供给我们的消息框，来显示一个 `success` 消息。
            - 如果发帖失败，我们则使用 `put` 发起一个 `POST_ERROR ` 的 action 来更新创建帖子失败的信息到 Redux
            Store，接着使用了 Taro UI 提供给我们的消息框，来显示一个 `error` 消息。


            #### 一些额外的工作


            为了创建 `watcherSaga` 和 `handlerSaga`，我们还导入了 `postApi`，我们将在后面来创建这个 API。


            除此之外我们还导入了需要使用的 action 常量：


            - `POST_SUCCESS `：设置处理帖子逻辑成功信息

            - `POST_ERROR `：设置处理帖子逻辑失败信息

            - `SET_POSTS`：将新帖子添加到 Redux Store

            - `CREATE_POST`： 相应创建帖子的常量

            - `SET_POST_FORM_IS_OPENED`：更新发帖框的开闭逻辑


            这里的 `POST_SUCCESS` 和 `POST_ERROR` 我们还没有创建，我们将马上在 “下一剑” 中创建它。


            以及一些 `redux-saga/effects` 相关的 helper 函数，我们已经在之前的内容中详细讲过了，这里就不再赘述了。


            #### 加入 saga 中心调度文件


            我们像之前将 `watchLogin` 等加入到 `sagas` 中心调度文件一样，将我们创建好的 `watchCreatePost`
            也加入进去：


            ```JavaScript

            // ...之前的逻辑

            import { watchCreatePost } from './post'

            export default function* rootSaga() {
              yield all([
               // ... 之前的逻辑
                fork(watchCreatePost)
              ])
            }

            ```


            ### 第三剑：定义 `sagas` 需要的常量文件


            打开 `src/constants/post.js` 文件，定义我们之前创建的常量文件如下：


            ```JavaScript

            export const POST_SUCCESS = 'POST_SUCCESS'

            export const POST_ERROR = 'POST_ERROR'

            ```


            ### 第四剑：定义 `sagas` 涉及到的前端 API 文件


            在之前的 `post` saga 文件里面，我们使用到了
            `postApi`，它里面封装了用于向后端（这里我们是小程序云）发起和帖子有关请求的逻辑，让我们马上来实现它吧。


            在 `src/api/` 文件夹下添加 `post.js` 文件，并在文件中编写内容如下：


            ```JavaScript

            import Taro from '@tarojs/taro'

            async function createPost(postData, userId) {
              const isWeapp = Taro.getEnv() === Taro.ENV_TYPE.WEAPP
              const isAlipay = Taro.getEnv() === Taro.ENV_TYPE.ALIPAY

              console.log('postData', postData, userId)

              // 针对微信小程序使用小程序云函数，其他使用小程序 RESTful API
              try {
                if (isWeapp) {
                  const { result } = await Taro.cloud.callFunction({
                    name: 'createPost',
                    data: {
                      postData,
                      userId,
                    },
                  })

                  return result.post
                }
              } catch (err) {
                console.error('createPost ERR: ', err)
              }
            }


            const postApi = {
              createPost,
            }

            export default postApi;

            ```


            在上面的代码中，我们定义了 `createPost ` 函数，它是一个 `async` 函数，用来处理异步逻辑，在
            `createPost ` 函数中，我们对当前的环境进行了判断，且只在微信小程序，即 `isWeapp`
            的条件下执行创建帖子的操作，对于支付宝小程序和 H5，我们则放在下一节使用 LeanCloud 的 Serverless 来解决。


            创建帖子逻辑是一个 `try/catch` 语句，用于捕捉可能存在的请求错误，在 `try` 代码块中，我们使用了 `Taro`
            为我们提供的微信小程序云的云函数 API `Taro.cloud.callFunction` 来便捷的向小程序云发起云函数调用请求。


            这里我们调用了一个 `createPost ` 云函数，并将 `postData `  和 `userId`
            作为参数传给云函数，用于在云函数中使用用户 Id 和帖子数据来创建一个属于此用户的帖子并保存到数据库，我们将在下一节中实现这个云函数。



            如果调用成功，我们可以接收返回值，用于从后端返回数据，这里我们返回了 `result.post` 数据。


            如果调用失败，则打印错误。


            最后我们定义了一个 `postApi ` 对象，用于存放所有和用户逻辑有个的函数，并添加 `createPost ` API
            属性然后将其导出，这样在 `post` saga 函数里面就可以导入 `postApi` 然后通过
            `postApi.createPost` 的方式来调用 `createPost` API 处理创建帖子的逻辑了。


            #### 在 API 默认文件统一导出


            在 `src/api/index.js` 文件中导入上面创建的 `postApi` 并进行统一导出如下：


            ```JavaScript

            import postApi from './post'

            export { postApi }
      - file: functions/createPost/package.json
        display: true
        explain:
          pre: >-
            ### 第五剑：创建对应的微信小程序云函数


            #### 创建 createPost 云函数


            按照和之前创建 `login` 云函数类似，我们创建 `createPost` 云函数。


            ![](tuture-assets/image-5f006311d35d7ac6.png)


            创建成功之后，我们可以得到两个文件，一个是 `functions/createPost/package.json`
            文件，它和之前的类似。
      - file: functions/createPost/index.js
        display: true
        explain:
          pre: >+
            第二个文件就是我们需要编写创建帖子逻辑的 `functions/createPost/index.js`
            文件，微信小程序开发者工具会默认为我们生成一段样板代码。


            我们在 `function/createPost` 文件夹下同样运行 `npm install`
            安装对应的云函数依赖，这样我们才能运行它。


            #### 编写 createPost 云函数


            打开 `functions/createPost/index.js` 文件，对其中的内容作出对应的修改如下：

          post: >-
            可以看到上面的代码改动主要有以下七处：


            - 首先我们给 `cloud.init()` 传入了环境参数，我们使用了内置的
            `cloud.DYNAMIC_CURRENT_ENV`，表示自动设置为当前的云环境，即在右键点击小程序开发者工具里
            `functions` 文件夹时选择的环境。

            - 接着，我们通过 `cloud.database()` 生成了数据实例 `db`，用于之后在函数体中便捷的操作云数据库。

            - 接着就是 `main` 函数体，我们首先从 `event` 对象中取到了在小程序的调用
            `Taro.cloud.callFunction` 传过来的 `postData ` 和 `userId` 数据。

            - 然后，跟着取数据的是一个 `try/catch` 语句块，用于捕获错误，在 `try` 语句块中，我们使用 `db`
            的查询操作：`db.collection('user').doc(userId).get()`，表示查询 `id` 为 `userId`
            的 `user` 表数据，它查出来应该是个唯一值，如果不存在满足 `where` 条件的，那么是一个 `null` 值，如果存在满足
            条件的，那么返回一个 `user` 对象。

            - 接着，我们使用的 `db.collection('post').add()` 添加一个 `post` 数据，然后在 `add`
            方法中传入 `data` 字段，这里我们不仅传入了 `postData` ，还将 `user`
            也一同传入了，原因我们将在之后来讲解。除此之外，这里我们额外使用了 `db.serverDate()`
            用于记录创建此帖子的时间和更新此帖子的时间，方便之后做条件查询。

            - 接着，因为向数据库添加一个记录之后只会返回此记录的 `_id`，所以我们需要一个额外的操作
            `db.collection('post').doc()` 来获取此条记录，这个 `doc`
            用于获取指定的记录引用，返回的是这条数据，而不是一个数组。

            - 最后我们返回新创建的 `post`。


            ::: info

            **提示**


            我们在上面创建 `post` 的时候，将 `user` 对象也添加到了 `post` 数据中，这里是因为小程序云数据库是 JSON
            数据库,所以没有关系数据库的外键概念,导致建关系困难,所以为了之后查询 `post` 的时候方便展示 `user`
            数据，我们才这样保存的. 当然更加科学的做法是在 `post` 里面保存
            `userId`，这样能减少数据冗余，但是因为做教学用，所以这些我们偷了一点懒。


            所以我们这里强烈建议,在正规的环境下，关系型数据库应该建外键，JSON 数据库也至少应该保存 `userId`。

            ::::
      - file: src/reducers/post.js
        display: true
        explain:
          pre: >-
            ### 第六剑： 定义对应的 `reducers` 文件


            我们在前面处理创建帖子时，在组件内部 `dispatch` 了 `CREATE_POST` action，在处理异步 action 的
            saga 函数中，使用 `put` 发起了一系列更新 store 中帖子状态的 action，现在我们马上来实现响应这些 action
            的 `reducers`，打开 `src/reducers/post.js`，对其中的代码做出对应的修改如下：
          post: |-
            看一看到上面的代码主要有三处改动：

            - 首先我们导入了必要的 action 常量
            - 接着我们给 `INITIAL_STATE` 增加了几个字段：
              - `posts `：保存帖子列表的数据，创建新的帖子也会保存在这里面。
              - `post `：保存单个帖子，我们将在之后讲解用于在获取帖子详情时保存数据用。
            - `isPost `：用于标志帖子逻辑过程中是否在执行创帖逻辑，`true` 表示正在执行创帖中，`false` 表示登录逻辑执行完毕
              - `postStatus `：用于标志创帖过程中的状态：开始创帖（`CREATE_POST `）、创帖成功（`POST_SUCCESS `）、登录失败（`POST_ERROR `）
            - 最后就是 `switch` 语句中响应 action，更新相应的状态。
      - file: src/pages/index/index.jsx
        display: true
        explain:
          pre: >-
            ## “六脉神剑” 搞定 getPosts 异步逻辑


            在上一 “大” 节中，我们使用了图雀社区不传之术：“六脉神剑” 搞定了 `createPost`
            的异步逻辑，现在我们马上趁热打铁来巩固我们的武功，搞定 getPosts 异步逻辑，它对应着我们小程序底部两个 tab
            栏的第一个，也就是我们打开小程序的首屏渲染逻辑，也就是一个帖子列表。


            ### 第一剑：`index` 组件中发起异步请求


            打开 `src/pages/index/index.jsx` 文件，对其中的内容作出对应的修改如下：
          post: >-
            可以看到，上面的内容做了如下四处修改：


            - 首先我们对当前的开发环境做了判断，如果是微信小程序环境，我们就使用  `Taro.cloud.init()`
            进行小程序环境的初始化。

            - 接着，我们在 `useEffects` Hooks 里面定义了 `getPosts` 函数，它是一个异步函数，用于
            `dispatch` GET_POSTS 的异步请求，并且我们进行了判断，当此时 Redux Store
            内部没有文章时，才进行数据的获取。

            - 接着，我们改进了 `getStorage` 获取缓存的函数，将其移动到 `useEffects`  Hooks 里面，并额外增加了
            `_id` 属性，它被赋值给 `userId` 一起设置 Redux Store
            中关于用户的属性，这样做的目的主要是为了之后发帖标志用户，或者获取用户的个人信息用。并且，加了一层 `if` 判断，只有当没有登录时，即
            `isLogged` 为 false 的时候，才进行获取缓存操作。

            - 最后我们导入了必要的 `GET_POSTS` 常量，并且将 `return` 语句里的 `PostCard` 接收的 `key` 和
            `postId` 属性变成了真实的帖子 `_id`。这样我们在帖子详情时可以直接拿 `postId` 向小程序云发起异步请求。


            ::: info

            **注意**


            在上一篇教程中，有同学提到没有使用 `Taro.cloud.init()`
            初始化的问题，是因为分成了两篇文章，在这篇文章才初始化。要使用小程序云，初始化环境是必要的。

            :::


            ### 第二剑：声明和补充对应需要的异步 `sagas` 文件


            在 “第一剑” 中，我们从组件中 dispatch 了 action.type 为 `GET_POSTS` 的异步
            Action，接下来我们要做的就是在对应的 `sagas` 文件中补齐响应这个异步 action 的 sagas。


            打开 `src/sagas/post.js` 文件，在其中定义 `getPosts` sagas 逻辑如下：


            ```JavaScript

            import {
              GET_POSTS,
            } from '../constants'


            function* getPosts() {
              try {
                const posts = yield call(postApi.getPosts)

                // 其实以下三步可以合成一步，但是这里为了讲解清晰，将它们拆分成独立的单元

                // 发起获取帖子成功的 action
                yield put({ type: POST_SUCCESS })

                // 更新 Redux store 数据
                yield put({
                  type: SET_POSTS,
                  payload: {
                    posts,
                  },
                })
              } catch (err) {
                console.log('getPosts ERR: ', err)

                // 获取帖子失败，发起失败的 action
                yield put({ type: POST_ERROR })
              }
            }

            function* watchGetPosts() {
              while (true) {
                yield take(GET_POSTS)

                yield fork(getPosts)
              }
            }


            export { watchGetPosts }

            ```


            可以看到，上面的改动主要是创建 `watcherSaga` 和 `handlerSaga` 。


            **创建 `watcherSaga`**


            - 我们创建了登录的 `watcherSaga`： `watchGetPosts `，它用来监听 `action.type` 为
            `GET_POSTS ` 的 action，并且当监听到 `GET_POSTS ` action 之后，然后激活
            `handlerSaga`：`getPosts ` 去处理对应的获取帖子列表的逻辑。

            - 这里的 `watcherSaga`：`watchGetPosts ` 是一个生成器函数，它内部是一个 `while`
            无限循环，表示在内部持续监听 `GET_POSTS ` action。

            - 在循环内部，我们使用了 `redux-saga` 提供的 `effects helper` 函数：`take`，它用于监听
            `GET_POSTS ` action，获取 action 中携带的数据。

            - 接着我们使用了另外一个 `effects helper` 函数：`fork`，它表示非阻塞的执行
            `handlerSaga`：`getPosts `，因为这里获取帖子列表不需要传数据，所以这里没有额外的数据传递逻辑。


            **创建 `handlerSaga`**


            - 我们创建了创建帖子的 `handlerSaga`：`getPosts `，它用来处理创建逻辑。

            - `getPosts ` 也是一个生成器函数，在它内部是一个 `try/catch`
            语句，用于处理获取帖子列表请求可能存在的错误情况。

            - 在 `try` 语句中，首先是使用了 `redux-saga` 提供给我们的 `effects helper` 函数：`call`
            来调用登录的 API：`postApi. getPosts `。
              - 如果获取帖子列表成功，我们使用 `redux-saga` 提供的 `effects helpers` 函数：`put`，`put` 类似之前在 `view` 中的 `dispatch` 操作，，来 `dispatch` 了两个 action：`POST_SUCCESS `，`SET_POSTS `，代表更新获取帖子列表成功的状态，设置最新获取的帖子列表到 Redux Store 中。
            - 如果获取帖子列表失败，我们则使用 `put` 发起一个 `POST_ERROR ` 的 action 来更新获取帖子列表失败的信息到
            Redux Store


            #### 一些额外的工作


            为了创建 `watcherSaga` 和 `handlerSaga`，我们还导入了 `postApi. getPosts
            `，我们将在后面来创建这个 API。


            除此之外我们还导入了需要使用的 action 常量：


            - `GET_POSTS `：响应获取帖子列表的 ACTION 常量，我们将在 “第三剑” 中创建它。


            #### 加入 saga 中心调度文件


            我们像之前将 `watchCreatePost` 等加入到 `sagas` 中心调度文件一样，将我们创建好的
            `watchGetPosts ` 也加入进去：


            ```JavaScript

            // ...之前的逻辑

            import { watchGetPosts } from './post'

            export default function* rootSaga() {
              yield all([
               // ... 之前的逻辑
                fork(watchGetPosts)
              ])
            }

            ```


            ### 第三剑：定义 `sagas` 需要的常量文件


            打开 `src/constants/post.js` 文件，定义我们之前创建的常量文件如下：


            ```JavaScript

            export const GET_POSTS = 'GET_POSTS'

            ```


            ### 第四剑：定义 `sagas` 涉及到的前端 API 文件


            在之前的 `post` saga 文件里面，我们使用到了
            `postApi.getPosts`，它里面封装了用于向后端（这里我们是小程序云）发起和获取帖子列表有关请求的逻辑，让我们马上来实现它吧。


            打开 `src/api/post.js` 文件，并在其中编写内容如下：


            ```JavaScript

            // ... 其余逻辑一样

            async function getPosts() {
              const isWeapp = Taro.getEnv() === Taro.ENV_TYPE.WEAPP
              const isAlipay = Taro.getEnv() === Taro.ENV_TYPE.ALIPAY

              // 针对微信小程序使用小程序云函数，其他使用小程序 RESTful API
              try {
                if (isWeapp) {
                  const { result } = await Taro.cloud.callFunction({
                    name: 'getPosts',
                  })

                  return result.posts
                }
              } catch (err) {
                console.error('getPosts ERR: ', err)
              }
            }


            const postApi = {
              // ... 之前的 API
              getPosts,
            }


            // ... 其余逻辑一样

            ```


            在上面的代码中，我们定义了 `getPosts ` 函数，它是一个 `async` 函数，用来处理异步逻辑，在 `getPosts `
            函数中，我们对当前的环境进行了判断，且只在微信小程序，即 `isWeapp` 的条件下执行获取帖子列表的操作，对于支付宝小程序和
            H5，我们则放在下一节使用 LeanCloud 的 Serverless 来解决。


            创建帖子逻辑是一个 `try/catch` 语句，用于捕捉可能存在的请求错误，在 `try` 代码块中，我们使用了 `Taro`
            为我们提供的微信小程序云的云函数 API `Taro.cloud.callFunction` 来便捷的向小程序云发起云函数调用请求。


            这里我们调用了一个 `getPosts ` 云函数，我们将在下一节中实现这个云函数。



            如果调用成功，我们可以接收返回值，用于从后端返回数据，这里我们返回了 `result.posts` 数据，即从小程序云返回的帖子列表。


            如果调用失败，则打印错误。


            最后我们在已经定义好的 `postApi ` 对象里，添加 `getPosts ` API 属性然后将其导出，这样在 `post`
            saga 函数里面就可以导入 `postApi` 然后通过 `postApi. getPosts ` 的方式来调用 `getPosts
            ` API 处理获取帖子列表的逻辑了。
      - file: functions/getPosts/package.json
        display: true
        explain:
          pre: |-
            ### 第五剑：创建对应的微信小程序云函数

            #### 创建 getPosts 云函数

            按照和之前创建 `createPost` 云函数类似，我们创建 `getPosts ` 云函数。

            ![](tuture-assets/image-560ef4e2593d9e2d.png)

            创建成功之后，我们可以得到两个文件，一个是 `functions/getPosts/package.json` 文件，它和之前的类似。
      - file: functions/getPosts/index.js
        display: true
        explain:
          pre: >+
            第二个文件就是我们需要编写创建帖子逻辑的 `functions/getPosts/index.js`
            文件，微信小程序开发者工具会默认为我们生成一段样板代码。


            我们在 `function/getPosts ` 文件夹下同样运行 `npm install`
            安装对应的云函数依赖，这样我们才能运行它。


            #### 编写 getPosts 云函数


            打开 `functions/getPosts/index.js` 文件，对其中的内容作出对应的修改如下：

          post: >-
            可以看到上面的代码改动主要有以下处：


            - 首先我们给 `cloud.init()` 传入了环境参数，我们使用了内置的
            `cloud.DYNAMIC_CURRENT_ENV`，表示自动设置为当前的云环境，即在右键点击小程序开发者工具里
            `functions` 文件夹时选择的环境。

            - 接着，我们通过 `cloud.database()` 生成了数据实例 `db`，用于之后在函数体中便捷的操作云数据库。

            - 接着就是 `main` 函数体，里面是一个 `try/catch` 语句块，用于捕获错误，在 `try` 语句块中，我们使用
            `db` 的查询操作：`db.collection('post').get()`，表示查询所有的 `post` 数据。

            - 最后我们返回查询到的  `posts` 数据。


            ### 第六剑： 定义对应的 `reducers` 文件


            因为这里 `SET_POSTS` 的 Action 我们在上一 “大” 节中创建帖子时已经定义了，所有在 “这一剑”
            中我们无需添加额外的代码，复用之前的逻辑就好。
      - file: src/pages/post/post.jsx
        display: true
        explain:
          pre: "## “六脉神剑” 搞定 getPost 异步逻辑\n\n在上面两 “大” 节中，我们连续用了两次 “六脉神剑”，相信跟到这里的同学应该对我们接下来要做的事情已经轻车熟路了吧\U0001F601。\n\n接下来，我们将收尾 Post 逻辑的最后一公里，即帖子详情的异步逻辑 “getPost” 接入，话不多说就是干！\n\n### 第一剑：`post` 组件中发起异步请求\n\n打开 `src/pages/post/post.jsx` 文件，对其中的内容作出对应的修改如下："
          post: >
            可以看到，上面的内容做了如下四处修改：


            - 首先我们使用 `useDispatch` Hooks 获取到了 `dispatch` 函数。

            - 接着，在 `useEffects` Hooks 里面定义了 dispatch 了 action.type 为 GET_POST 的
            action，它是一个异步 Action，并且我们在 Hooks 最后返回了一个函数，其中的内容为将 `post`
            设置为空对象，这里用到的 `SET_POST` 常量我们将在后面定义它。这个返回函数主要用于 `post` 组件卸载之后，Redux
            Store 数据的重置，避免下次打开帖子详情还会渲染之前获取到的帖子数据。

            - 接着，我们使用 `useSelector` Hooks 来获取异步请求到的 `post` 数据，并用于 `return`
            语句中的数据渲染。

            - 最后我们删除了不必要的获取 `posts` 数据的 `useSelector` Hooks，以及删掉了不必要的调试
            `console.log` 语句。


            ### 第二剑： 声明和补充对应需要的异步 `sagas` 文件


            在 “第一剑” 中，我们从组件中 dispatch 了 action.type 为 `GET_POST` 的异步
            Action，接下来我们要做的就是在对应的 `sagas` 文件中补齐响应这个异步 action 的 sagas。


            打开 `src/sagas/post.js` 文件，在其中定义 `getPosts` sagas 逻辑如下：


            ```JavaScript
              // ... 和之前的逻辑一样
            import {
              // ... 和之前的逻辑一样
              SET_POST,
            } from '../constants';

              // ... 和之前的逻辑一样

            function* getPost(postId) {
              try {
                const post = yield call(postApi.getPost, postId)

                // 其实以下三步可以合成一步，但是这里为了讲解清晰，将它们拆分成独立的单元

                // 发起获取帖子成功的 action
                yield put({ type: POST_SUCCESS })

                // 更新 Redux store 数据
                yield put({
                  type: SET_POST,
                  payload: {
                    post,
                  },
                })
              } catch (err) {
                console.log('getPost ERR: ', err)

                // 获取帖子失败，发起失败的 action
                yield put({ type: POST_ERROR })
              }
            }

            function* watchGetPost() {
              while (true) {
                const { payload } = yield take(GET_POST)

                yield fork(getPost, payload.postId)
              }
            }


            export { watchGetPost }

            ```


            可以看到，上面的改动主要是创建 `watcherSaga` 和 `handlerSaga` 。


            **创建 `watcherSaga`**


            - 我们创建了登录的 `watcherSaga`： `watchGetPost `，它用来监听 `action.type` 为
            `GET_POST ` 的 action，并且当监听到 `GET_POST ` action 之后，然后激活
            `handlerSaga`：`getPost ` 去处理对应的获取单个帖子的逻辑。

            - 这里的 `watcherSaga`：`watchGetPost ` 是一个生成器函数，它内部是一个 `while`
            无限循环，表示在内部持续监听 `GET_POST ` action。

            - 在循环内部，我们使用了 `redux-saga` 提供的 `effects helper` 函数：`take`，它用于监听
            `GET_POST ` action，获取 action 中携带的数据，这里我们拿到了传过来的 `payload` 数据。

            - 接着我们使用了另外一个 `effects helper` 函数：`fork`，它表示非阻塞的执行
            `handlerSaga`：`getPost `，并传入了获取到 `payload.postId` 参数。


            **创建 `handlerSaga`**


            - 我们创建了获取单个帖子的 `handlerSaga`：`getPost `，它用来处理获取帖子逻辑。

            - `getPost ` 也是一个生成器函数，在它内部是一个 `try/catch` 语句，用于处理获取单个帖子请求可能存在的错误情况。

            - 在 `try` 语句中，首先是使用了 `redux-saga` 提供给我们的 `effects helper` 函数：`call`
            来调用登录的 API：`postApi. getPost `。
              - 如果获取单个帖子成功，我们使用 `redux-saga` 提供的 `effects helpers` 函数：`put`，`put` 类似之前在 `view` 中的 `dispatch` 操作，，来 `dispatch` 了两个 action：`POST_SUCCESS `，`SET_POSTS `，代表更新获取单个帖子成功的状态，设置最新获取的帖子到 Redux Store 中。
            - 如果获取单个帖子失败，我们则使用 `put` 发起一个 `POST_ERROR ` 的 action 来更新获取单个帖子失败的信息到
            Redux Store


            #### 一些额外的工作


            为了创建 `watcherSaga` 和 `handlerSaga`，我们还导入了 `postApi.getPost
            `，我们将在后面来创建这个 API。


            除此之外我们还导入了需要使用的 action 常量：


            - `SET_POST `：响应获取帖子列表的 ACTION 常量，我们将在 “第三剑” 中创建它
      - file: src/sagas/index.js
        display: true
        explain:
          pre: >-
            #### 加入 saga 中心调度文件


            我们像之前将 `watchGetPosts` 等加入到 `sagas` 中心调度文件一样，将我们创建好的 `watchGetPost `
            也加入进去：


            打开 `src/sagas/index.js` 文件，对其中的内容作出如下的修改：
          post: >-
            ### 第三剑：定义 `sagas` 需要的常量文件


            打开 `src/constants/post.js` 文件，定义我们之前创建的常量文件 `GET_POST`：


            ```JavaScript


            export const SET_POST = 'SET_POST'

            ```


            ### 第四剑：定义 `sagas` 涉及到的前端 API 文件


            在之前的 `post` saga 文件里面，我们使用到了
            `postApi.getPost`，它里面封装了用于向后端（这里我们是小程序云）发起和获取单个帖子有关请求的逻辑，让我们马上来实现它吧。


            打开 `src/api/post.js` 文件，并在其中编写内容如下：


            ```JavaScript

            // ... 其他内容和之前一致

            async function getPost(postId) {
              const isWeapp = Taro.getEnv() === Taro.ENV_TYPE.WEAPP
              const isAlipay = Taro.getEnv() === Taro.ENV_TYPE.ALIPAY

              // 针对微信小程序使用小程序云函数，其他使用小程序 RESTful API
              try {
                if (isWeapp) {
                  const { result } = await Taro.cloud.callFunction({
                    name: 'getPost',
                    data: {
                      postId,
                    },
                  })

                  return result.post
                }
              } catch (err) {
                console.error('getPost ERR: ', err)
              }
            }


            const postApi = {
              getPost,
            }

            export default postApi

            ```


            可以看到上面的代码有如下六处改动：


            - 在上面的代码中，我们定义了 `getPost ` 函数，它是一个 `async` 函数，用来处理异步逻辑，在 `getPost`
            函数中，我们对当前的环境进行了判断，且只在微信小程序，即 `isWeapp` 的条件下执行获取单个帖子的操作，对于支付宝小程序和
            H5，我们则放在下一节使用 LeanCloud 的 Serverless 来解决。


            - 创建帖子逻辑是一个 `try/catch` 语句，用于捕捉可能存在的请求错误，在 `try` 代码块中，我们使用了 `Taro`
            为我们提供的微信小程序云的云函数 API `Taro.cloud.callFunction` 来便捷的向小程序云发起云函数调用请求。


            - 这里我们调用了一个 `getPost ` 云函数，并给它传递了对应要获取的帖子的 `postId` 我们将在下一节中实现这个云函数。


            - 如果调用成功，我们可以接收返回值，用于从后端返回数据，这里我们返回了 `result.post` 数据，即从小程序云返回的单个帖子。


            - 如果调用失败，则打印错误。


            - 最后我们在已经定义好的 `postApi ` 对象里，添加 `getPost ` API 属性然后将其导出，这样在 `post`
            saga 函数里面就可以导入 `postApi` 然后通过 `postApi. getPost ` 的方式来调用 `getPost `
            API 处理获取单个帖子的逻辑了。
      - file: src/constants/post.js
        display: false
        explain:
          pre: ''
      - file: src/sagas/post.js
        display: false
        explain:
          pre: ''
      - file: src/api/post.js
        display: false
        explain:
          pre: ''
      - file: src/api/index.js
        display: false
      - file: functions/getPost/package.json
        display: true
        explain:
          pre: |-
            ### 第五剑：创建对应的微信小程序云函数

            #### 创建 getPost 云函数

            按照和之前创建 `getPosts` 云函数类似，我们创建 `getPost ` 云函数。

            ![](tuture-assets/image-7d9f70c8a90700da.png)

            创建成功之后，我们可以得到两个文件，一个是 `functions/getPost/package.json` 文件，它和之前的类似。
      - file: functions/getPost/index.js
        display: true
        explain:
          pre: >+
            第二个文件就是我们需要编写创建帖子逻辑的 `functions/getPost/index.js`
            文件，微信小程序开发者工具会默认为我们生成一段样板代码。


            我们在 `function/getPost ` 文件夹下同样运行 `npm install` 安装对应的云函数依赖，这样我们才能运行它。


            #### 编写 getPost 云函数


            打开 `functions/getPost/index.js` 文件，对其中的内容作出对应的修改如下：

          post: >-
            可以看到上面的代码改动主要有以下处：


            - 首先我们给 `cloud.init()` 传入了环境参数，我们使用了内置的
            `cloud.DYNAMIC_CURRENT_ENV`，表示自动设置为当前的云环境，即在右键点击小程序开发者工具里
            `functions` 文件夹时选择的环境。

            - 接着，我们通过 `cloud.database()` 生成了数据实例 `db`，用于之后在函数体中便捷的操作云数据库。

            - 接着就是 `main` 函数体，里面是一个 `try/catch` 语句块，用于捕获错误，在 `try` 语句块中，我们首先从
            `event`  对象里面获取到了 `postId`，接着我们使用 `db`
            的查询操作：`db.collection('post').doc(postId).get()`，表示查询所有的对应 `_id` 为
            `postId` 的单个帖子数据

            - 最后我们返回查询到的  `post` 数据。


            ### 第六剑： 定义对应的 `reducers` 文件


            因为这里 `SET_POST` 的 Action 我们在上上 “大” 节中创建帖子时已经定义了，所有在 “这一剑”
            中我们无需添加额外的代码，复用之前的逻辑就好。
      - file: functions/createPost/yarn.lock
        display: false
      - file: functions/getPost/yarn.lock
        display: false
      - file: functions/getPosts/yarn.lock
        display: false
      - file: functions/login/yarn.lock
        display: false
      - file: yarn.lock
    explain:
      pre: >-
        欢迎继续阅读《Taro 小程序开发大型实战》系列，前情回顾：


        - [熟悉的 React，熟悉的 Hooks](https://tuture.co/2019/12/25/34a473b/)：我们用 React
        和 Hooks 实现了一个非常简单的添加帖子的原型

        - [多页面跳转和 Taro UI 组件库](https://tuture.co/2019/12/25/af69225/)：我们用 Taro
        自带的路由功能实现了多页面跳转，并用 Taro UI 组件库升级了应用界面

        -
        [实现微信和支付宝多端登录](https://tuture.co/2019/12/25/5e10118/)：实现了微信、支付宝以及普通登录和退出登录

        - [Hooks + Redux 双剑合璧](https://tuture.co/2019/12/25/5e100f7/)：使用了 Hooks
        版的 Redux 来进行状态管理


        如果你敲到这里，会发现我们之后的内容都是纯前端（小程序端）的逻辑，一个完整的可上线小程序应用应该还要有后端，在这篇文章中，我们将使用微信小程序云作为我们的后台，接着我们会引进
        `redux-saga` 来帮助 Redux 优雅的处理异步流程，本文最终的实现效果如下：


        ![](tuture-assets/result-11ec1de85de0d7bc.gif)


        在这一篇中，我们将开始引入和实践 Redux 异步工作流，如果你不熟悉 Redux，推荐阅读我们的《Redux 包教包会》系列教程：


        - [Redux 包教包会（一）：解救 React 状态危机](https://tuture.co/2019/11/28/1fe175a/)

        - [Redux 包教包会（二）：趁热打铁，完全重构](https://tuture.co/2019/11/28/d129c56/)

        - [Redux 包教包会（三）：各司其职，重拾初心](https://tuture.co/2019/11/28/a3b94eb/)


        如果你希望直接从这一步开始，请运行以下命令：


        ```bash

        git clone -b miniprogram-start
        https://github.com/tuture-dev/ultra-club.git

        cd ultra-club

        ```



        在前面的代码中，我们通过将数据保存在 Storage
        里面来完成数据的持久化，这样可以解决小规模数据的存储和查询问题，一旦数据量变大了，那么查询和存储就需要依靠专门的数据库来解决了，一般我们可以通过自建后端和数据库的方式来解决，但当小程序正越来越火的同时，一种被称为
        Serverless 的模式被提出并也逐渐火爆起来，通俗意义上来概括就是
        “无后端”，即把后端交给云服务厂商（阿里云、腾讯云、京东云等），开发者只需要专注于前端逻辑，快速交付功能。


        一般的小程序 Serverless 服务都包含三大功能：


        - 数据库：一般是以 JSON 数据格式进行存储，可以将数据存储在云端数据库中。

        - 存储：支持文本、图片等用户生成内容的存储，可以获取资源的链接进行使用。

        - 云函数：可以用 Node.js 进行开发，自己编写对应的后端逻辑，并把写好的代码传到云端，然后在小程序前端使用 API 进行调用。



        ::: info

        关于小程序 Serverless
        的详细描述，这里推荐一篇文章，有兴趣的同学可以详细了解一下：[什么是小程序Serverless？](https://help.aliyun.com/document_detail/122371.html)

        :::


        在这一节中，我们使用微信小程序云作为我们的
        “后端”，微信小程序云和小程序账号绑定在一起，一个小程序账号可以开通一个小程序云空间，接下来我们来详细讲解如何开通小程序云。


        ### 开通小程序云


        1. 首先确保你注册了小程序的微信公众平台账号：[注册地址](https://mp.weixin.qq.com/)。

        2. 登录之后，在菜单栏开发 > 开发设置里面找到 `AppID`，他应该是一个18位字符串。

        3.
        使用[微信开发者工具](https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html)打开我们的
        `ultra-club` 项目文件夹，然后在微信开发者工具菜单栏中选择设置 > 项目设置，打开设置栏：


        ![](tuture-assets/image-d81c7e066a6f0fc0.png)


        4.找到设置栏的基本信息，AppID 栏将其修改为上面的 AppID 如下：


        ![](tuture-assets/image-b2a5a398def7e4c3.png)


        5.当设置了 AppID 之后，我们的开发者工具里面的 “云开发” 按钮应该就会变成可点击状态，找到左上角的 “云开发”
        的按钮并点击，类似下面这张图：


        ![](tuture-assets/image-ee0be913c4712735.png)


        4.点击 ”云开发“ 按钮之后会弹出确认框，点击同意就会进到小程序云开发控制台：


        ![](tuture-assets/image-769acb328cd3a17e.png)


        进来之后我们首先看到的是云开发控制台的 ”运营分析“
        界面，这是用来可视化云开发各类资源的使用情况的界面，在这篇教程中我们不会讲解这方面内容。我们主要来讲一下图中标红的部分：


        - 其中序号为 1 的就是我们的云数据库，它是一个 JSON 数据库，里面存储着我们在开发时需要的数据。

        - 序号为2的是存储，即我们可以上传一些文本、图片、音/视频，然后返回给我们访问这些资源的链接。

        - 序号3是云函数，即我们可以在这里面管理一些我们编写的的后端 Node.js 逻辑，它运行在云中，我们可以在小程序端通过 API 来调用它们。

        - 序号4是代表我们此次的云环境的标识符，可以用于在小程序端以 API 调用云开发资源时标志此时的调用的云环境。


        在本篇教程中，我们会用到上面提到的数据库和云函数两项功能。


        ### 创建数据库表


        介绍完小程序云的界面，我们马上来动手实践，来创建我们需要的数据库表，因为我们前端逻辑主要分为 `user` 和 `post`
        两类逻辑，所以我们在数据库中创建两张表：


        ![](tuture-assets/image-215ce2e787202948.png)


        这里我们具体来解释一下这个数据库操作界面的含义：


        - 可以看到，点击云开发控制台左上角的第二个按钮，然后点击图中标红序号为1的 “+” 按钮，创建两个集合 `user` 和
        `post`，这样我们就创建好了我们的数据库表。

        - 序号为2表示我们可以选中某个集合，点击右键进行删除操作。

        - 序号为3表示我们可以给某个集合添加记录，因为是 JSON 数据库，集合中每条记录都可以不一样。

        - 序号4表示我们可以选中某条记录，点击右键进行删除操作

        - 序号5表示我们可以给单个记录添加字段

        - 序号6表示我们可以选中单个记录进行删/改操作

        - 序号7表示我们可以查询这个集合中某条记录


        #### 创建 `post` 记录


        这里我们添加了一条默认的 `post` 记录，表示之前我们之前小程序端的那条默认数据，这条数据记录了 `post` 的相关信息：


        - `_id`： 此条数据的唯一标识符

        - `title`： 文章标题

        - `content`： 文章内容

        - `user`： 发表此文章的用户，这里我们为了方便起见，直接保存了用户的完整信息，一般的最佳实践建议是保存此用户的 `_id`
        属性，然后在查询 `post` 时，取出此用户的 `_id` 属性，然后去查 `user` 得到用户的完整信息。

        - `updatedAt`：此条记录的上次更新时间

        - `createdAt`：此条记录的创建时间


        #### 创建 `user` 记录


        上面我们提到了我们在这条文章记录里面保存了发帖作者信息，那么当然我们的 `user` 集合中就要新建一条此作者的信息如下：


        ![](tuture-assets/image-6ec3dd64c5753c4d.png)


        可以看到，我们添加了一条用户记录，它的字段如下：


        - `_id`：此用户在 `user` 集合中的唯一标识符

        - `avatar`：此用户的头像地址

        - `nickName`：此用户的昵称，我们将用它来进行登录

        - `createdAt`：创建此记录的时间

        - `updatedAt`：上次更新此记录的时间


        #### 在小程序端初始化小程序云环境


        在开通了小程序云之后，我们还需要在小程序前端代码中进行小程序云环境的初始化设置，这样才能在小程序前端调用小程序的 API。


        打开 `src/index/index.jsx` 文件，在其中添加如下的代码：


        ```JavaScript

        import Taro, { useEffect } from '@tarojs/taro'


        // ... 其余代码一致


        export default function Index() {
          // ... 其余代码一致
          useEffect(() => {
            const WeappEnv = Taro.getEnv() === Taro.ENV_TYPE.WEAPP

            if (WeappEnv) {
              Taro.cloud.init()
            }

          // ...其余代码一致
          return (
            <View className="index">
              ...
            </View>
          )
        }


        ```


        可以看到，我们增加了微信小程序环境的获取和判断，当当前环境是微信小程序环境时，我们需要调用 `Taro.cloud.init()`
        来进行小程序云环境的初始化。


        ### 小结


        到现在为止，我们讲解了如何开通小程序云，然后讲解了小程序云控制台界面，同时，我们讲解了将会用到的数据库功能界面，在其中创建了我们应用需要的两张表（集合）：`post`
        和 `user`，并且各自初始化了一条记录。


        好了，准备好了小程序云，我们开始准备在应用中接入它了，但在此之前，因为我们要接入小程序云，那么势必要发起异步的请求，这就需要了解一下 Redux
        的异步处理流程，在下一节中，我们将使用 `redux-saga` 中间件来简化 Redux 处理异步的流程。
      post: >-
        ### 小结


        在这篇教程中，我们连续使用了三次 “六脉神剑” 讲完了我们的 Post 逻辑的异步流程，让我们再来复习一下我们开头提到的 “六脉神剑”：


        - 将组件中的同步逻辑重构到异步逻辑

        - 声明和补充对应需要的异步 `sagas` 文件

        - 定义 `sagas` 需要的常量文件

        - 定义 `sagas` 涉及到的前端 API 文件

        - 创建对于的微信小程序云函数，并编写对应的 Node.js 处理逻辑

        - 定义对应的 `reducers` 文件


        这是一套讲解模式，也是一套写代码的最佳实践方式之一，希望你能受用。


        #### 一点遗憾


        这两篇讲解微信小程序云的文章有一个小小的遗憾，我们也在之前的文章中提到过了，就是微信小程序云仅限于微信小程序内的使用，如果我们想做多端应用，比如支付宝小程序云，H5
        网站，那么单单使用微信小程序就显得无能为力了，我们将在下一篇文章中引入 LeanCloud Serverless
        服务，并使用它来补齐我们跨端小程序开发的短板，敬请期待！✌️
  - name: 'LeanCloud,一统江湖'
    commit: abfd872
    diff:
      - file: src/api/utils.js
        display: true
        explain:
          pre: >-
            ### 定义 LeanCloud 相关的辅助函数


            对于接入 LeanCloud，我们需要在应用中做一系列初始化环境的准备，在 `src/api/` 文件夹下创建 `utils.js`
            文件，并在其中编写内容如下：
          post: >-
            可以看到，上面的代码主要分为四个部分：


            - 定义云函数的 REST URL，LeanCloud 的云函数 REST URL
            的格式类似这样：`https://API_BASE_URL/1.1/functions/functionName`，其中
            `API_BASE_URL`
            可以通过文档获取：[点我访问](https://leancloud.cn/docs/leanengine-rest-api.html#hash-1722650509)；而
            `functionName` 即为我们需要调用的云函数名字。这里我们定义了 `API_BASE_URL`
            ，我们给了空字符串，读者可以根据 LeanCloud 给与的 `Base URL`
            替代空字符串；同样我们定义了四个云函数，分别代表登录、创帖、查询帖子列表、查询单个帖子，具体的云端云函数我们将在后面定义。

            - 第二个部分即为向 LeanCloud 服务器发送 REST
            请求时需要携带的请求头部，这个也可以在文档里给出：[点我访问](https://leancloud.cn/docs/leanengine-rest-api.html#hash20005220)；这里也需要用户用自己的内容来替换上面的空字符串。

            - 第三个部分则为两个辅助转换格式的函数，主要用于将 LeanCloud 数据库格式的数据与现有的微信小程序数据库格式的数据兼容。

            - 第四个部分为导出这些定义的内容，供其它模块使用。


            ::: info

            **提示**


            上面的 `API_BASE_URL` 和 `HEADER` 都需要用户在登录的情况下访问给出的地址才能获取到。

            :::


            ### 在 LeanCloud 上面创建数据库表


            登录 LeanCloud 控制台，在左边栏的 **存储 > 结构化数据** 可以看到创建 Class 的按钮，我们可以通过创建一个
            Class 来创建一张数据库表：


            ![](tuture-assets/image-4cb13f15ee12ad44.png)


            可以看到我们创建了两张表：`Post` 和 `MyUser`，一个存放和帖子相关的数据，一个存放和用户相关的数据。其中 `MyUser`
            类似之前我们在微信小程序数据库表时的 `user` 表。


            #### 定义 MyUser 字段


            如图之前在微信小程序数据库表创建时一样，我们同样为 `MyUser` 定义如下的字段：


            - avatar

            - nickName


            至于读者看到的其它字段都是 LeanCloud 默认创建且自动更新的字段，用户不可以操作。


            #### 定义 Post 字段


            同样和之前在微信小程序里面创建 `post` 一样，我们给 Post 定义如下字段:


            - content

            - title

            - user


            眼尖的同学可能注意到了，这里的 `user` 字段是一个 `Pointer` 类型，它是 LeanCloud
            数据表独有的引用类型，类似关系数据库里面的外键，即存一个指针，之后获取数据的时候可以便捷的获取对应的 `user` 数据。


            #### 关于默认 Class 的解释


            这里有些读者可能有疑问，为什么还有一些多余的表了？这些以下划线开头的 Class 其实是 LeanCloud
            默认创建的，不允许删除，用于 LeanCloud SDK 封装一系列常用且复杂的应用功能，供用户快速搭建
            App/网站/小程序原型，比如类似微信的朋友圈功能，LeanCloud 提供开箱即用的逻辑，你可以直接调用。


            并且，类似 `_User` 和 `User` Class 其实是引用自同一个 Class，所以不能创建和 LeanCloud
            默认的类具有同名且不带前缀下划线的类，比如 `User` ，`File` 类就不能创建，所以这里我们创建了 `MyUser`
            类，这样不用去考虑 `_User` 类本身存在的一些细节限制。
      - file: src/components/AlipayLoginButton/index.js
        display: true
        explain:
          pre: >-
            ### 在 LeanCloud 上创建云函数


            在上一步里面，我们在小程序代码里创建了和 LeanCloud
            有关的逻辑代码，其中我们创建了四个云函数，现在我们要创建对应这四个云函数的实际云函数。


            注册并登陆 LeanCloud 之后，点击左边栏的 **云引擎 > 部署** 可以看到类似下面的界面：


            ![](tuture-assets/image-d3a09bf272416f22.png)


            LeanCloud
            提供给我们在线创建和编写云函数的方便界面，使得我们不用自己创建本地服务器代码和配置部署和运维过程，大大加速了程序的开发过程。


            接下来，我们将遵循以下三步走的方式来进行 LeanCloud 云函数的开发：


            - 创建云函数

            - 部署

            - 在小程序端进行调试


            ### 创建 User 逻辑 云函数


            点击界面里面的创建按钮，会看到如下的界面：


            ![](tuture-assets/image-7c77e8f7fbccf648.png)


            可以看到上图分为如下几个部分：


            - 选择我们要创建的函数类型，主要有三类，这里我们选择 `Function`
            ，这也是默认选择的类型，其余两类读者有兴趣可以自行探索，这里我们不展开讲。

            - 接着就是定义你的函数名，这里我们填入 `login`。

            - 接着就是编写函数体，它是一个 Node.js 函数，我们只需要编写对应的 Node.js 处理逻辑就可以了。

            - 最后我们可以对这个函数写一点注释，方便日后回顾，这里我们选择不填入。


            好的，了解了创建函数的弹出层之后，我们填入我们需要创建的 `login` 函数体如下：


            ```JavaScript

            const { userInfo } = request.params


            const query = new AV.Query('MyUser')

            query.equalTo('nickName', userInfo.nickName)

            const users = await query.find()


            if (users.length > 0) {
                return users[0]
            } else {
                const MyUser = AV.Object.extend('MyUser')
                const myUser = new MyUser()

                const { nickName, avatar } = userInfo
                myUser.set('nickName', nickName)
                myUser.set('avatar', avatar)

                const user = await myUser.save()
                return user
            }

            ```


            可以看到我们上面的内容主要改动有四处：


            - 从 `request.params` 取到对应的请求体数据 `userInfo`，这决定了我们之后在小程序端调用 LeanCloud
            云函数时，要使用 `POST` 的方式。

            - 接着我们使用了 LeanCloud 的查询 SDK 操作
              - 首先通过 `new AV.Query` 新建一个对 `MyUser` Class 的查询请求。注意到这里的 `AV` 接口是 LeanCloud 暴露给我们的默认接口，可以通过这个接口操作 LeanCloud 的各种资源。
              - 接着通过 `equalTo` 进行条件过滤，这里我们查询 `nickName` 为 `userInfo.nickName` 的用户。
              -  通过 `query.find()` 来提交查询操作，注意到这里我们使用了 `await` 关键字，那是因为默认包裹云函数提的是一个 `async` 函数，允许我们方便的执行异步流程。
            - 接着我们对查询到的数据进行判断，如果 `users.length > 0 `
            表示存在用户，那么我们返回查询到的第一个用户；如果不存在，我们执行创建用户操作，再返回创建的用户。

            - 创建用户的操作主要是如下几个步骤：
              - `AV.Object.extend` 对应的 Class 来获取对应的类
              - 实例化这个类获取一个对象
              - 设置这个对象的属性，这里通过 `set(key, value)` 的方式设置
              - 通过对象的 `save` 方法进行保存，保存到 LeanCloud 数据库

            ::: info

            **注意**


            这里我们只用到了 LeanCloud
            的一些简单操作，具体的详情可以查看官方文档，官方文档撰写了非常完备的操作指南：[点我查看](https://leancloud.cn/docs/leanstorage_guide-js.html)。

            :::


            #### 部署


            按照上面的步骤编写完 `login`
            云函数之后，点击保存，此时我们的云函数就编写好了，但是我们目前在小程序端还无法调用它，因为我们还需要一个部署的操作。


            在 LeanCloud 上面进行云函数的部署也同样简单，只需要点击一个按钮：


            ![](tuture-assets/image-7969c02e1badc548.png)


            点我之后，等待部署提示，过一会应该就会提示部署成功，这个时候我们就可以在小程序端通过 REST API 访问了。


            #### 在小程序端进行调试


            我们这里使用 LeanCloud 主要是让支付宝小程序也可以成为全栈应用，对应我们之前提到的 H5，因为 Taro 目前对 H5
            的支持还不完善，我们决定放弃对 H5 的讲解, 但是这并不代表 Taro
            存在缺陷，只能说它是一个很有潜力的框架，成长还需要实践，并且跨端小程序是它诞生的重点，将精力放在主要的路径上是值得提倡的，Taro
            在近期发布了 Taro Next，支持使用 Vue/React/Nerve
            开发跨端小程序，笔者这里推荐读者可以尝试一波：[点我跳转](https://taro.jd.com/)。


            因为我们首先创建了 `login` 的云函数，所以我们需要改进一下我们的支付宝登录的按钮逻辑，打开
            `src/components/AlipayLoginButton/index.js` 对其中的内容作出如下的修改:
          post: >-
            可以看到，上面的内容改动主要有三处：


            - 我们删掉了使用支付宝获取登录信息之后存缓存的逻辑

            - 接着，我们 dispatch 了一个 `action.type` 为 LOGIN 的异步 ACTION，并传递了
            `userInfo` 数据

            - 最后我们导入了需要的 `LOGIN` 常量。
      - file: src/api/user.js
        display: true
        explain:
          pre: |-
            除了支付宝登录按钮的逻辑改进之外，我们还要改进我们的 api 逻辑，加上对支付宝环境的判断和调用对应的 LeanCloud 云函数。

            打开 `src/api/user.js` 文件，对其中的内容作出对应的修改如下：
          post: >-
            可以看到上面主要做了四处修改：


            - 首先我们导入了之前定义的和 LeanCloud 有个的 `utils` 函数。

            - 接着我们加入了对 H5 环境的判断。

            - 最后我们增加了一个 `else if` 流程，用于判断在支付宝小程序或者 H5 环境下需要执行发起 REST
            请求的逻辑，这里我们使用了 `Taro.request` 进行网络请求，并传入了对应的 `url`
            、`header`、`data`，以及将请求的类型设置为 `POST`，之前我们提到过，对 LeanCloud 云函数发起请求都需要使用
            `POST` 方法。

            - 最后我们将从 LeanCloud 拿到的请求结果使用 `convertUserFormat `
            做了一次格式的转换，以适应现有的微信小程序数据类型。


            好了，通过以上三步流程，我们就跑通了小程序类请求 LeanCloud 的流程，保存修改的代码，让我们马上打开支付宝小程序试一下吧！


            ![](tuture-assets/leancloud-1-4bf697a564eb0f1a.gif)
      - file: src/api/post.js
        display: true
        explain:
          pre: >-
            ### 创建 Post 逻辑云函数


            在上一节中，我们创建了 User 逻辑的 `login` 云函数，在这一节中，我们来收尾 Post 逻辑的三个云函数：


            - `createPost`

            - `getPosts`

            - `getPost`


            因为创建的逻辑和方式和之前的 `login` 云函数类似，我们这里不再赘述，会简单的贴一下代码，但我们同样按照之前的三步流程来讲解。


            #### 创建云函数


            首先创建我们的 `createPost` 云函数，其代码如下：


            ```JavaScript

            const { postData, userId } = request.params



            const Post = AV.Object.extend('Post')

            const post = new Post();


            const myUser = AV.Object.createWithoutData('MyUser', userId)

            const newPost = await post.save({
                ...postData,
                user: myUser
            });


            const query = new AV.Query('Post')

            const postWithUser = await query.equalTo('objectId',
            newPost.get('objectId')).include('user').first()


            return postWithUser

            ```


            接着来创建我们的获取帖子列表的云函数 `getPosts`，其代码如下：


            ```JavaScript

            const query = new AV.Query('Post')

            const posts = await query.include('user').find()


            return posts

            ```


            最后是我们的获取帖子详情的云函数 `getPost`：


            ```JavaScript

            const { postId } = request.params


            const query = new AV.Query('Post')

            const post = await query.equalTo('objectId',
            postId).include('user').first()


            return post

            ```


            #### 部署


            好的，三个和 Post 逻辑有关的云函数创建好了，我们马上点击部署按钮来将它们部署上线。


            #### 在小程序端测试


            当创建好云函数，并部署好之后，我们就可以在小程序端编写对应的代码进行测试了，打开 `src/api/post.js`
            文件，对其中的代码做出对应的修改如下：
          post: >-
            可以看到上面主要做了四处修改：


            - 首先我们导入了之前定义的和 LeanCloud 有关的 `utils` 函数。

            - 接着我们加入了对 H5 环境的判断。

            - 最后我们增加了一个 `else if` 流程，用于判断在支付宝小程序或者 H5 环境下需要执行发起 REST
            请求的逻辑，这里我们使用了 `Taro.request` 进行网络请求，并传入了对应三个和 Post 逻辑有关的 `url`
            、以及对应的 `header`、`data`，以及将请求的类型设置为 `POST`，之前我们提到过，对 LeanCloud
            云函数发起请求都需要使用 `POST` 方法。

            - 最后我们将从 LeanCloud 拿到的请求结果使用 `convertPostFormat `
            做了一次格式的转换，以适应现有的微信小程序数据类型。


            好了，通过以上三步流程，我们就跑通了小程序类请求 LeanCloud 的流程，保存修改的代码，让我们马上打开支付宝小程序试一下吧！


            ![](tuture-assets/leancloud-2-f1ddd47a26e4d9ae.gif)
    explain:
      pre: "在上两篇文章中，我们讲解了使用微信小程序云作为我们的小程序后台，然后我们跑通了我们的注册登录、创建帖子、获取帖子列表、获取帖子详情的全栈流程，如果只想了解微信小程序的全栈开发流程的话，之前的文章已经足够了，如果还想了解跨端开发全栈开发流程的话（当然用 Taro 的同学估计也比较期待跨端的全栈开发流程，手动滑稽）接下来这篇文章就是你的菜了\U0001F606\n\n首先我们先来看一下最终的运行效果：\n\n![](tuture-assets/leancloud-3.gif)\n\n在这一篇文章中，我们将接入 LeanCloud Serverless 服务，它类似微信小程序云，只不过它没有平台属性，所有的端都可以便捷访问，相信你已经迫不及待了，让我们马上开始吧\U0001F4AA！\n\n### 小程序接入外网的流程\n\n因为小程序是封装在一些巨型 App 应用里的沙盒环境之内，所以对于接入外站的服务需要一些特殊的流程，我们在这里总结一下：\n\n- 注册外站服务的账号\n- 找到对应的小程序开发接入指南\n- 获取对应的接入地址，将接入地址填入小程序后台的白名单列表\n- 在小程序实际接入，并进行测试\n\n在这篇文章中，我们的外站特指 LeanCloud Serverless 云服务，小程序特指微信小程序和支付宝小程序。\n\n好的，了解了流程之后，我们现在来走一遍流程来将我们的 LeanCloud 接入到微信/支付宝小程序。\n\n#### 注册外站服务的账号\n\n访问 LeanCloud 网址：[点我访问](https://www.leancloud.cn/)，完成注册登录流程。\n\n#### 找到对应的小程序开发接入指南\n\n这里我们找到 LeanCloud 微信/QQ 小程序接入指南：[点我访问](https://leancloud.cn/docs/weapp.html)\n\n::: info\n**注意**\n\nLeanCloud 没有提供支付宝的接入指南，但是小程序接入指南都基本类似，我们会一一讲解这一流程。\n:::\n\n#### 获取对应的接入地址\n\nLeanCloud 已经有详细的链接提示如何接入：\n\n![](tuture-assets/image-f017da933d02a499.png)\n\n对于支付宝小程序的白名单配置地址如下：[点我访问](https://mini.open.alipay.com/channel/miniIndex.htm)。\n\n#### 在小程序实际接入，并进行测试\n\n最后我们需要进行小程序的实际接入，因为 LeanCloud 并没有提供支付宝小程序的 SDK 包，这里对于支付宝小程序我们使用 LeanCloud 提供的 REST 接口进行访问，具体地址如下：[点我访问](https://leancloud.cn/docs/leanengine-rest-api.html#hash20005220)。"
      post: "### 小结\n\n在这篇文章中，我们讲解了支付宝小程序接入 LeanCloud Serverless 云服务的过程，我们再来复习一下整个流程：\n\n- 首先我们讲解了微信小程序云的不足，然后引出了 LeanCloud 来实现跨端小程序开发\n- 接着我们介绍了 LeanCloud 服务的配置过程，具体包含 1）注册登录 LeanCloud 2）配置对应的小程序后台的白名单。且因为 LeanCloud 没有支付宝小程序的 SDK，所以我们采用 REST 请求的方式来获取和修改对应的数据\n- 接着我们讲解了如何在 LeanCloud 上面创建数据表。\n- 接着，我们介绍了如何在 LeanCloud 创建云函数。\n- 最后我们通过三步走流程：1）创建云函数 2）部署 3）在小程序端测试，创建了我们需要的四个云函数。\n\n我们再来看一下整体的接入效果：\n\n![](tuture-assets/leancloud-3-5f5cf4af09a34c4e.gif)\n\n到这里我们的 **Taro 多端小程序开发大型实战** 就基本告一段落了，整个教程内容想当长，涵盖的内容也相当多，这也是图雀社区最长的一个系列教程。最后希望 Taro 社区越来越好，也希望能帮到您！\n\n### One More Thing\n\n我们在之前的教程中花了8篇文章的篇幅讲解了小程序从0到开发完成的过程，但是我们还没将如何将小程序上线，这里我们再额外花一点笔墨讲一下如何上线你的小程序，因为小程序的上线很容易，所以内容不会很长，有兴趣的读者可以继续读下去ღ( ´･ᴗ･` )比心。\n\n#### 微信小程序上线\n\n首先点击小程序开发者工具的右上角的上传按钮：\n\n![](tuture-assets/image-2ae3cfd8008c3e92.png)\n\n接着去微信小程序网站后台：[点我前往](https://mp.weixin.qq.com/wxamp/home/guide?lang=zh_CN&token=160873486)。\n\n进行登录之后，在进来的第一个页面的第二步可以看见版本发布的信息，安装微信官方的流程进行即可。\n\n![](tuture-assets/image-7c6c55dde66e13a6.png)\n\n#### 支付宝小程序上线\n\n首先点击支付宝小程序开发者工具的右上角上传按钮：\n\n![](tuture-assets/image-c5fe559acd96a5dd.png)\n\n接着去支付宝小程序后台：[点我前往](https://mini.open.alipay.com/channel/miniIndex.htm)。\n\n进行登录之后，点击顶部的 开发中心，选择小程序应用，选择你的小程序应用，然后同样可以看到类似发布上线的栏目，安装支付宝官方的流程进行发布就可以了。\n\n![](tuture-assets/image-3e0e96370de6d1ac.png)\n\n::: info\n**提示**\n\n微信/支付宝小程序对于有社交、社区性质的小程序是需要企业认证的，所以有类似需求的需要做一下准备。\n:::\n\n好了，到这里我们的要说再见了 \U0001F44B！希望你们学得开心！\n"
